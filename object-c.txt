#import <UIKit/UIKit.h>
#import "AppDelegate.h"

int main(int argc, char * argv[]) {
    NSString * appDelegateClassName;
    @autoreleasepool {
        //모든코드는 이안에서 작성!
        int wheel = 4; //int float double long - primitive type
        int seats = 2;
        NSLog(@"wheel: %i, seats: %i", wheel, seats); //화면에 찍을때 int는 %i
       
        appDelegateClassName = NSStringFromClass([AppDelegate class]);
    }
    return UIApplicationMain(argc, argv, nil, appDelegateClassName);
}

=======================================================
@interface 의 의미는 클래스를 정의한다는 뜻이다. 즉, 자바의 interface와 다르다.
ex) @interface SimpleClass : NSObject  (상속을 받는다, NSO라는)
    @end


-------------------------------
#)실제 예시
(선언부)
@interface XYZPerson : NSObject(최상위다, 생략해도 상관없음)
- (void)sayHello;
@end

(구현부)
#import "XYZPerson.h"
@implementation XYZPerson
-(void)sayHello {
    NSLog(@"Hello, World!");
}
@end
--------------------------------
class, instance  == object
#)선언부
//변수선언부
@interface Vehicle : NSObject {
    //member variable 영역
    int wheels;
    int seats;
}

//함수선언부
//member method
-(void)setWheels:(int)w;   //w라는 인자를 받겠다
-(void)setSeats:(int)s;
-(void)print;   //받을게 없어서 이렇게 정의

#)구현부
@implementation Vehicle
-(void)setWheels:(int)w { //인자를 던져준다.
    wheels = w;
}

-(void)setSeats:(int)s {
    seats = s;
}

-(void)print {
    NSLog(@"wheels: %i, seats: %i",wheels,seats); //가져올때는 member variable영역에서 그대로 가져오면 된다.
}

int main(int argc, char * argv[]) {

    @autoreleasepool {
        //class는 *넣어줘야한다
        Vehicle *hello = [Vehicle new]  //인스턴스 생성
       
        //[Receiver Message] Message는 함수이름, 누구의 메시지인지 hello객체의
        [hello setWheels:4];
        [hello setSeats:2];
        [hello print];
    }
    return 0;
}

===============================================
여기서 new는 메모리 힙영역에 동적할당 == alloc과 init을 합쳐놓은것이다 -> self사용가능

#import <UIKit/UIKit.h>
#import "AppDelegate.h"

@interface Vehicle : NSObject {
    //member variable 영역
    int wheels;
    int seats;
}

//member method
@property int wheels; //getter, setter 해준다(member method에서 @property 선언해주면 된다)
@property int seats;
-(void)print;   //받을게 없어서 이렇게 정의
#)구현부
@implementation Vehicle
@synthesize wheels;  //property해주면 이거 같이해주면 됨.
@synthesize seats;

-(void)print{
    NSLog(@"wheels: %i, seats: %i",wheels,seats);
}

int main(int argc, char * argv[]) {

    @autoreleasepool {
        Vehicle *hello = [Vehicle new]  //인스턴스 생성
        //Vehicle *hello = [[Vehicle alloc]init]  //인스턴스 생성
       
        [hello setWheels:4];
        [hello setSeats:2];
       
        //NSLog(@"wheels: )
    }
    return 0;
}
====================================================
@interface Vehicle : NSObject {
    //member variable 영역
    //int wheels;
    //int seats;
}

//getter, setter 이름 재정의해보기 setWheels를 wheels로(setter=wheels:), wheels를 getWheels로(getter=getWheels)
//setter에 콜론(:) 을 붙이는 이유는 세터는 무조건 하나의 인자는 받아야하기때문에
@property (getter=getWheels,setter=wheels:) int wheels; //getter, setter 해준다, member variable영역에서 변수 생략가능하다.
@property int seats;
-(void)print;   //받을게 없어서 이렇게 정의

@implementation Vehicle
@synthesize wheels;  //property해주면 이거 같이해주면 됨.
@synthesize seats;

-(void)print{
    NSLog(@"wheels: %i, seats: %i",wheels,seats);
}

int main(int argc, char * argv[]) {

    @autoreleasepool {
        Vehicle *hello = [Vehicle new]  //인스턴스 생성
        //Vehicle *hello = [[Vehicle alloc]init]  //인스턴스 생성
       
        //@property (getter=getWheels) int wheels; 이거에 인해서 [hello wheels] 는 못부른다.
        [hello getwheels]  //@property (getter=getWheels,setter=wheels:) int wheels; 이렇게 했기때문에 가능하다.
        [hello wheels:4]
       
    }
    return 0;
}

========================================================
//
//  main.m
//  FirstProject
//
//  Created by 조성동 on 2023/04/13.
//

#import <UIKit/UIKit.h>
#import "AppDelegate.h"

@interface Vehicle : NSObject {
    //member variable 영역
    //int wheels;
    //int seats;
}

@property int wheels; //getter, setter 해준다, member variable영역에서 변수 생략가능하다.
@property int seats;
-(void)print;   //받을게 없어서 이렇게 정의

@implementation Vehicle
@synthesize wheels;  //property해주면 이거 같이해주면 됨.
@synthesize seats;
//-(void)setWheels:(int)w {
//    wheels = w;
//}
//
//-(void)setSeats:(int)s {
//    seats = s;
//}
-(void)print {
    NSLog(@"wheels: %i, seats: %i",wheels,seats);
}
//-(int)wheels {
//    return wheels;
//}
//-(int)seats {
//    return seats;
//}

int main(int argc, char * argv[]) {

    @autoreleasepool {
        Vehicle *hello = [Vehicle new]  //인스턴스 생성
       
        //[hello wheels] 이렇게 접근하는 방식은 옛날방식이다.
        hello.wheels;
        hello.seats;
        hello.wheels = 4;
        hello.seats = 2;
       
    }
    return 0;
}

====================================================
#)이제 파일을 분리해서 해보자.
new - cocoa class - 클래스이름은 Vehicle로 만들면 m, h 파일이 생긴다.

//
//  Vehicle.h
//  FirstProject
//
//  Created by 조성동 on 2023/04/17.
//

#import <Foundation/Foundation.h>

@interface Vehicle : NSObject {
    //member variable 영역, @property하면 member variable영역에서 변수 선언안해도된다.
}

@property int wheels; //getter, setter 해준다, member variable영역에서 변수 생략가능하다.
@property int seats;

//인자를 2개 받게된다.
-(void)setWheels:(int)w Seats:(int)s;

-(void)drawCircleX:(int)x Y:(int)y R:(int)r;
-(void)drawCircleXYR:(int)x :(int)y :(int)r;

-(void)print;   //받을게 없어서 이렇게 정의

@end


-----------------------
//
//  Vehicle.m

#import "Vehicle.h"

@implementation Vehicle
@synthesize wheels;  //property해주면 이거 같이해주면 됨.
@synthesize seats;

-(void)setWheels:(int)w Seats:(int)s {
    wheels = w;
    seats = s;
}

-(void)print {
    NSLog(@"wheels: %i, seats: %i",wheels,seats);
}
@end

--------------------------
//
//  main.m
//  FirstProject
//
//  Created by 조성동 on 2023/04/13.
//

//애플에서 제공하는거는 꺽새(<>) 로 , 우리가 만든건 "" 로 import한다.
#import <UIKit/UIKit.h>
#import "AppDelegate.h"
#import "Vehicle.h"

int main(int argc, char * argv[]) {

    @autoreleasepool {
        //Vehicle *hello = [Vehicle new];  //인스턴스 생성
        Vehicle *hello = [[Vehicle alloc]init];
       
        [hello setWheels:4 Seats:2];
        [hello drawCircleXYR:1 :3 :2];
       
        NSLog(@"wheels: %i, seats: %i", hello.wheels, hello.seats);
    }
    return 0;
}

=================================================
//
//  main.m
//  FirstProject
//
//  Created by 조성동 on 2023/04/13.
//

//애플에서 제공하는거는 꺽새(<>) 로 , 우리가 만든건 "" 로 import한다.
#import <UIKit/UIKit.h>
#import "AppDelegate.h"
#import "Vehicle.h"

int main(int argc, char * argv[]) {

    @autoreleasepool {
        //Vehicle *hello = [Vehicle new];  //인스턴스 생성
        Vehicle *hello = [[Vehicle alloc]init];
       
        [hello setWheels:4 Seats:2];
        [hello drawCircleXYR:1 :3 :2];
           
        if(hello.wheels == 4) {
            NSLog(@"wheels: 4");
        }else {
            NSLog(@"no");
        }
       
        switch(hello.seats) {
            case 4:
                NSLog(@"wheels: 4");
                break;
            case 3:
                NSLog(@"wheels: 2");
                break;
            default:
                NSLog(@"NO");
                break;
        }
       
        for(int i=0l i<hello.wheels; i++) {
            NSLog(@"wheels: %i", i);
        }
        int i = 0;
        while(i<hello.seats) {
            NSLog(@"seats: %i", i);
            i++;
        }
    }
    return 0;
}

=====================================================
foundation framework -> 안에 최상위 클래스 NSObject 그 밑에 많다.

//NSString

#import <UIKit/UIKit.h>
#import "AppDelegate.h"

int main(int argc, char * argv[]) {
    @autoreleasepool {
        //객체를 만들어야 쓸 수 있다.
        NSString *str = [[NSString alloc]init]; //인스턴스 오브젝트 생성 - 초기화까지 진행해서 str이라는 변수에 할당한다.
        str = @"This is NSString"; //문자열이라는 의미이다.(@)
        NSLog(@"str : %@", str);
       
        //위에 방식은 불편해서 바로 쓰자
        //initwith라고 시작하는 메서드들을 convenience method라고하는데
        //동적할당을 하면서 초기화까지 같이하기 위해서 new 말고 alloc[init을 쓴다.
        NSString *str1 = [[NSString alloc]initWithString:@"This is NSString"];
        NSLog(@"str : %@", str);
       
        //근데 NSString은 많이 쓰이니까 NSString에서만 아래처럼 가능
        NSString *str2 = @"This is NSString";
        NSLog(@"str2: %@", str);
    }
    return 0;
}

============================================================
//NSString

#import <UIKit/UIKit.h>
#import "AppDelegate.h"

int main(int argc, char * argv[]) {
    @autoreleasepool {
       //NSString 메서드 중에 substringFromIndex가 있는데 문서에서 보면
       // -(NSString *)substringFromIndex:(NSUInteger)anIndex 이렇게되있다.
       // 반환값은 NSString이고 인자는 NSUInteger이다(양수->부호가없는)
   
       
       
        NSString *str = @"This is NSString";
       
        NSString *result;
        result = [str substringFromIndex:6];  //str의 메서드인 substringFromIndex에 인자를 던짐 -> 문자열반환
        result = [str substringToIndex:3]; //Thi
        result = [[str substringToIndex:11]substringFromIndex:8]; //This is NSS까지 자르고 NSS까지 다시 자른다. -> 결과는 NSS
        result = [[str substringFromIndex:8]substringToIndex:3]; //NSString자르고 NSS까지자르고
       
        NSLog(@"result : %@", result); //s NSString
       
        //NSString이 immutable한 클래스인데 -> 중간에 값을 바꿀수없다. 통째로는 가능한데 부분부분 수정이안된다.
        //그래서 위에처럼 리턴이 가능하다.
       
       
    }
    return 0;
}

============================================================
//NSString

#import <UIKit/UIKit.h>
#import "AppDelegate.h
int main(int argc, char * argv[]) {
    @autoreleasepool {
       //NSString 메서드 중에 substringWithRange가 있는데 문서에서 보면
       // -(NSString *)substringWithRange:(NSRange)aRange 로 되어있다.
       //NSRange를 보면 구조체이다.
       
        // location부터 length까지 잘라라
        //typedef struct _NSRange { 구조체이다.
        //    NSUInteger location;
        //    NSUInteger length;
        //}NSRange;
        NSString *str = @"This is NSString";
       
        NSString *result;
        //NSMakeRange는 구조체를 만드는 메서드이다.
        result = [str substringWithRange:NSMakeRange(8, 3)]; //NSS
        result = [[str substringWithRange:NSMakeRange(8,3)]lowercaseString]; //nss
       
       
    }
    return 0;
}

=============================================================
//NSString

#import <UIKit/UIKit.h>
#import "AppDelegate.h"

int main(int argc, char * argv[]) {
    @autoreleasepool {
       //이제 mmutable 보자 -> NSMutableString 클래스
       //문자열 중간중간을 바꿀 수 있다. - mutable이기 때문에 가능하다.
        NSString *str = @"This is NSString";
       
        //stringWIthString 메서드는 클래스메서드라서 init안해도 생성됨 
        NSMutableString *mstr = [NSMutableString stringWithString:str];
        //또 NSMutableString안에 인스턴스 메서드들도 있는데 그중에
        // -(void)appendString:(NSString *) 이있다. 이거는 반환값이 없고 자기자신이 바뀌는 것이다.
        // NSString은 새로운 스트링을 만들어서 리턴했다 이게 차이첨이다
        [mstr appendFormat:@" and NSMutableString"]; //This is NSString and NSMutableString
       
        //insertString도 있다.
        // -(void)insertString:(NSString *)
        //             atIndex:(NSUInteger)  -> 인자를 두개를 받는다.
       
        [mstr insertString:@"Mutable" atIndex:8]; //This is Mutable NSString and NSMutableString
       
    }
    return 0;
}

==========================================================
//NSArray

#import <UIKit/UIKit.h>
#import "AppDelegate.h"

int main(int argc, char * argv[]) {
    @autoreleasepool {
        //NSArray는 값 추가, 수정 불가 한번들어가면(안늘어난다)
        //NSMutableArray는 값을 넣으면 넣는대로 늘어난다.
       
        //arrayWith로 시작하는 메서드는 클래스메서드
        //initWith로 시작하는 메서드는 인스턴스메서드이다.
       
        //기능은 똑같다.
        //배열 초기화 해보자
        //nil을 넣는이유는 정적이기때문에 끝임을 알려줘야한다.
        NSArray *month = [[NSArray alloc]initWithObjects:@"January",@"Febrauary",@"march",
                          @"April",@"June",@"July", @"August", @"September",nil];
       
        //이 방식은 별로다
        for(int i = 0; i<[month count]; i++) {
            NSLog(@"month: %@", month[i]);
        }
       
        // -(ObjectType)objectAtIndex:(NSUInteger)  -> 객체를 반환한다.
        for(int i=0; i<[month count]; i++) {
            NSLog(@"month: %@", [month objectAtIndex:i]);
        }
       
        //for in 방식
        for(NSString *strTemp in month) {
            NSLog(@"month: %@", strTemp);
        }
    }
    return 0;
}
=============================================================
//NSArray

#import <UIKit/UIKit.h>
#import "AppDelegate.h"

int main(int argc, char * argv[]) {
    @autoreleasepool {
        NSArray *month = [[NSArray alloc]initWithObjects:@"January",@"Febrauary",@"march",
                                  @"April",@"June",@"July", @"August", @"September",nil];
               
        //NSMutableArray는 동적배열을 만든다.
        //이번에는 클래스메서드를 써보자 - alloc, init이 안쓰인다. 클래스 메서드이기 때문에
        NSMutableArray *mmonth = [NSMutableArray arrayWithArray:month];
        [mmonth addObject:@"October"]; //끝에추가 -> 이렇게 값 증가도 가능
        [mmonth addObject:@"November"];
        [mmonth addObject:@"December"];
       
        for(NSString *strTemp in mmonth) {
            NSLog(@"mmonth: %@", strTemp);
        }
    }
    return 0;
}

============================================================
//NSDictionary

#import <UIKit/UIKit.h>
#import "AppDelegate.h"

int main(int argc, char * argv[]) {
    @autoreleasepool {
       //초기화
       //메서드중에 dictionary로 시작하면 클래스메서드
       //init으로 시작하면 인스턴스메서드이다
       // value, key, value, key형식으로 넣는다.
       
        //정적이다.
       NSDictionary *dic = [NSDictionary alloc]initWithObjectsAndKeys:@"최강사",
        @"이름", @"모름", @"나이",nil];
       
        NSLog(@"name: %@",[dic objectForKey:@"이름"]); //name: 최강사
        NSLog(@"age: %@",[dic objectForKey:@"나이"]);  //age : 모름
    }
    return 0;
}

============================================================
//NSDictionary

#import <UIKit/UIKit.h>
#import "AppDelegate.h"

int main(int argc, char * argv[]) {
    @autoreleasepool {
       //NSMutableDictionary
        NSDictionary *dic = [NSDictionary alloc]initWithObjectsAndKeys:@"최강사",
                @"이름", @"모름", @"나이",nil];
       
        NSMutableDictionary *mdic = [NSMutableDictionary dictionaryWithDictionary:dic];
        [mdic setObject:@"한국" forKey:@"사는곳"];
        [mdic setObject:@"약간검정" forKey: @"얼굴색"]; //이렇게 추가할 수 있다.
       
        NSLog(@"location: %@", [mdic objectForKey:@"사는곳"]); //사는곳이 키값이다. -> location : 한국
       
    }
    return 0;
}

===========================================================
//
//  main.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <UIKit/UIKit.h>
#import "AppDelegate.h"
#import "Book.h"

int main(int argc, char * argv[]) {
    @autoreleasepool {
        Book *book1 = [[Book alloc]init]; //인스턴스 메서드
        book1.name = @"햄릿";
        book1.genre = @"비극";
        book1.author=@"세익스피어";
       
        [book1 bookPrint]
    }
}

--------------------
//
//  Book.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <Foundation/Foundation.h>

@interface Book : NSObject

//프로퍼티로 getter,setter자동
//strong은 객체를 첨조하고있다.라는 의미
@property (nonatomic, strong) NSString *name; //값에 동시에 접근할 필요가 업어서 non으로설정
@property (nonatomic, strong) NSString *genre;
@property (nonatomic, strong) NSString *author;

-(void)bookPrint;

@end

------------------------
//
//  Book.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "Book.h"

@implementation Book
@synthesize name,genre,author;

-(void)bookPrint {
    NSLog(@"Name: %@", name);
    NSLog(@"genre: %@", genre);
    NSLog(@"author: %@", author);
}

@end
===========================================
//
//  Book.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <Foundation/Foundation.h>

@interface Book : NSObject

//프로퍼티로 getter,setter자동
//strong은 객체를 첨조하고있다.라는 의미
@property (nonatomic, strong) NSString *name; //값에 동시에 접근할 필요가 업어서 non으로설정
@property (nonatomic, strong) NSString *genre;
@property (nonatomic, strong) NSString *author;

-(void)bookPrint;

@end

---------------------
//
//  Book.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "Book.h"

@implementation Book
@synthesize name,genre,author;

-(void)bookPrint {
    NSLog(@"Name: %@", name);
    NSLog(@"Name: %@", genre);
    NSLog(@"Name: %@", author);
}

@end

----------------------
//
//  BookManager.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <Foundation/Foundation.h>

//배열이 몇개들어올지 모르니까 늘어날수도있어서 mutable로 한다
@class Book; //컴파일오류 방지하기 위해 선언-> 컴파일이 빨라진다. import하는것보다
@interface BookManager : NSObject { //BookManager 클래스안에 bookList라는 변수가있다.
    NSMutableArray *bookList;
}

-(void)addBook:(Book *)bookObject;  //book객체를 인자로받는다
-(NSString *)showAllBook;

@end

-----------------------
//
//  BookManager.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "BookManager.h"
#import "Book.h"

@implementation BookManager
    //초기화코드
-(id)init {
    self = [super init];
    if(self) {
        bookList = [[NSMutableArray alloc]init];
    }
    return self;
}
-(void)addBook:(Book *)bookObject {
    [bookList addObject:bookObject];   //받은 bookObject를 추가
}
-(NSString *)showAllBook {
	//문자열합치기
    NSMutableString *strTemp = [[NSMutableString alloc]init];
   
    for(Book *bookTemp in bookList) { //bookTemp로 요소에 접근
        //누적시키기
        [strTemp appendString:@"Name: "];
        [strTemp appendString:bookTemp.name];
        [strTemp appendString:@"\n"];
        [strTemp appendString:@"genre: "];
        [strTemp appendString:bookTemp.genre];
        [strTemp appendString:@"author: "];
        [strTemp appendString:bookTemp.author];
    }
    return strTemp;
}

@end

----------------------
//
//  main.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <UIKit/UIKit.h>
#import "AppDelegate.h"
#import "Book.h"
#import "BookManager.h"

int main(int argc, char * argv[]) {
    @autoreleasepool {
        Book *book1 = [[Book alloc]init];
        book1.name = @"햄릿";
        book1.genre = @"비극";
        book1.author=@"세익스피어";
       
        [book1 bookPrint];
       
        Book *book2 = [[Book alloc]init];
        book2.name = @"누구를 위하여 종을 울리나";
        book2.genre = @"전쟁소설";
        book2.author=@"헤밍웨이";
       
        [book2 bookPrint];
       
        Book *book3 = [[Book alloc]init];
        book3.name = @"죄와 벌";
        book3.genre = @"사실주의";
        book3.author=@"톨스토이";
       
        [book3 bookPrint];
       
        BookManager *myBook = [[BookManager alloc]init];
        [myBook addBook:book1];
        [myBook addBook:book2];
        [myBook addBook:book3];
       
        //리턴이 문자열이라서 NSLog로 찍어야함
        NSLog(@"%@", [myBook showAllBook]);
       
    }
}
======================================================
//
//  Book.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <Foundation/Foundation.h>

@interface Book : NSObject

//프로퍼티로 getter,setter자동
//strong은 객체를 첨조하고있다.라는 의미
@property (nonatomic, strong) NSString *name; //값에 동시에 접근할 필요가 업어서 non으로설정
@property (nonatomic, strong) NSString *genre;
@property (nonatomic, strong) NSString *author;

-(void)bookPrint;

@end

-------------------------
//
//  Book.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "Book.h"

@implementation Book
@synthesize name,genre,author;

-(void)bookPrint {
    NSLog(@"Name: %@", name);
    NSLog(@"Name: %@", genre);
    NSLog(@"Name: %@", author);
}

@end

----------------------------
//
//  BookManager.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <Foundation/Foundation.h>

//배열이 몇개들어올지 모르니까 늘어날수도있어서 mutable로 한다
@class Book; //컴파일오류 방지하기 위해 선언-> 컴파일이 빨라진다. import하는것보다
@interface BookManager : NSObject { //BookManager 클래스안에 bookList라는 변수가있다.
    NSMutableArray *bookList;
}

-(void)addBook:(Book *)bookObject;  //book객체를 인자로받는다
-(NSString *)showAllBook;
-(NSUInteger)countBook; //책 갯수
-(NSString *)findBook:(NSString *)name; //책검색, 없으면 nil반환
-(NSString *)removeBook:(NSString *)name; //인자로 책이름을 받는다.

@end


---------------------------------
//
//  BookManager.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "BookManager.h"
#import "Book.h"

@implementation BookManager
    //초기화코드
-(id)init {
    self = [super init];
    if(self) {
        bookList = [[NSMutableArray alloc]init];
    }
    return self;
}

-(void)addBook:(Book *)bookObject {
    [bookList addObject:bookObject];   //받은 bookObject를 추가
}
-(NSString *)showAllBook {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
   
    for(Book *bookTemp in bookList) {
        //누적시키기
        [strTemp appendString:@"Name: "];
        [strTemp appendString:bookTemp.name];
        [strTemp appendString:@"\n"];
        [strTemp appendString:@"genre: "];
        [strTemp appendString:bookTemp.genre];
        [strTemp appendString:@"author: "];
        [strTemp appendString:bookTemp.author];
    }
    return strTemp;
}

-(NSUInteger)countBook {
    return [bookList count];
}

-(NSString *)findBook:(NSString *)name {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    for (Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) { //문자열비교
            [strTemp appendString:@"Name: "];
            [strTemp appendString:bookTemp.name];
            [strTemp appendString:@"\n"];
            [strTemp appendString:@"genre: "];
            [strTemp appendString:bookTemp.genre];
            [strTemp appendString:@"author: "];
            [strTemp appendString:bookTemp.author];
           
            return strTemp;
        }
    }
    return nil;
}
-(NSString *)removeBook:(NSString *)name {
    for(Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) { //이름이 같은걸 구해서 목록에서 제거
            [bookList removeObject:bookTemp];
            return name;
        }
    }
    return nil;
}

@end

------------------------------------------
//
//  main.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <UIKit/UIKit.h>
#import "AppDelegate.h"
#import "Book.h"
#import "BookManager.h"

int main(int argc, char * argv[]) {
    @autoreleasepool {
        Book *book1 = [[Book alloc]init];
        book1.name = @"햄릿";
        book1.genre = @"비극";
        book1.author=@"세익스피어";
       
        [book1 bookPrint];
       
        Book *book2 = [[Book alloc]init];
        book2.name = @"누구를 위하여 종을 울리나";
        book2.genre = @"전쟁소설";
        book2.author=@"헤밍웨이";
       
        [book2 bookPrint];
       
        Book *book3 = [[Book alloc]init];
        book3.name = @"죄와 벌";
        book3.genre = @"사실주의";
        book3.author=@"톨스토이";
       
        [book3 bookPrint];
       
        BookManager *myBook = [[BookManager alloc]init];
        [myBook addBook:book1];
        [myBook addBook:book2];
        [myBook addBook:book3];
       
        //리턴이 문자열이라서 NSLog로 찍어야함
        NSLog(@"%@", [myBook showAllBook]);
        NSLog(@"count : %li", [myBook countBook]);  //Unsigned는 li로 출력
       
        NSString *strTemp = [myBook findBook:@"죄와 벌"];
        if(strTemp != nil) {
            NSLog(@"%@", strTemp);
        }
        else {
            NSLog(@"찾으시는 책이 없네요");
        }
        
        NSString *removeResult = [myBook removeBook:@"죄와 벌"];
        if(removeResult != nil) {
            NSLog(@"%@ 책을 지웠습니다.", removeResult);
        }else {
            NSLog(@"찾으시는 책이 없네요");
        }
        NSLog(@"%@", [myBook showAllBook]);
    }
    return 0;
}

===========================================================
#) Swift같은 경우에는 타입추론이라고 해서~~~
var str:String = "안녕하세요"
var str = "안녕하세요" 가능하다.

#) 하지만 Object-c에서는 타입을 명시해주어야 한다.
NSString *str = @"안녕하세요";  //변수명앞에는 *을 붙여줘야한다.(;표시도 필수이다)

#) 대괄호 설명
UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(23,28,258,20)];

1. 왼쪽에 titleLabel은 포인터 변수라고 생각
2. 우측에 alloc는 new 같은 개념  
3. titleLabel.initWithFrame() 과 같고 CGRectMake()를 해서 나온사각형을 initWithFrame에 보내고
   그걸 포인터변수에 넣는다.

즉, [self addSubView:mMyVariable];  -> self.addSubView(mMyVariable); 과 같은의미이다.
==============================================================
#)ios에서 푸시알림을 구현하기 위해 지원하는 방법은 두가지가 있다.


#) APNs란 각 Device의 앱으로 푸시알림을 보내주게된다.

provider ---  apns --- device

provider가 apns로 메시지를 보내게 되면 이곳에서 인증서를 확인해서 신뢰하는 provider인지 확인한다.
확인이되면 device로 알림을 보내주게된다.

그래서 provider와 apns 사이의 인증서, apns와 device간의 인증서가 필요하게된다.

즉, 모든 푸시알림을 보내기 위햐ㅐ 중재를 하고있는 센터라고 생각

apns는 bundle Identifier로 프로젝트를 식별한다. 그렇기 때문에 애플개발자에서 등록해줘야한다.
이제 provider측에서 사용할 증명서를 발급해야한다.
그렇게 발급해야만 provider에서 apns로 메시지를 보내고 apns에서 각 디바이스로 푸시메시지를 보낼수있기때문이다.

만든 bundle Identifier에 들어가서 push Notifications을 추가

keys에 + 버튼을 눌러 Apple Push Notifications service (APNs) 키를(p8) 추가하면
이 키는 한번만 다운받을 수 있고, 키파일은 firebase에 사용된다.

순서는 app이 apns에게 device token을 요청한다. 그래야 apns가 푸시알림을 보낼수있다.
근데 device token은 apns에서 얻을 수 있기때문에 우리 app이 apns에 요청하는 것이다.
이렇게 apns가 device token을 알려주면 app이 push server(provider)에게 내 device token은 이거야!! 라고 보냄
여기까지가 연결과정임

이제 provider가 메시지를 보내고 싶을때는 apns에게 "device token은 이거고 보내고싶은 메시지는 이거야" 라고 apns에게 보낸다.
이때 apns와 provider는 TLS통신을 하기 때문에 pushserver에 인증서가 준비되어있어야한다.(p8)

그 후, apns는 해당 device token으로 데이터를 보낸다.
background 상태이면 os에서 처리해서 띄우고,
Foreground 상태이면 AppDelegate에 정의해놓은 방식 대로 APP위에 띄워질 것이다.

device token은 푸시가 전송되는 app주소라고 보면된다.

------------------------------------
#)앱의 생명주기(app's Life Cycle)
앱의 실행/종료 및 app이 Foreground, background 상태에 있을 때, 시스템이 발생시키는 이벤트에 의해 app의 상태가 전환되는 과정

#) ios에서 앱을 실행하면 무슨 일이 일어날까??
IOS 앱은 Objective-C 기반으로 돌아가기 때문에 앱은 main 함수에서 시작하지만, ios핵심 라이브러리인 UIKit framework가 main함수를 관리하기 때문에
앱 개발자들이 직접 main함수에 코드를 작성하지 않는다.
UIKit은 main함수를 다루는 과정에서 UIApplicationMain 함수를 실행한다.
이 함수를 통해 UIApplication객체가 생성되는데 이 객체를 통해 앱 개발자들은 앱의 실행에 부분적으로 관여할 수 있게 되는 것이다.

#)앱 실행되면 발생되는 일 정리
1. UIApplication 객체가 생성
2. @UIApplicationMain 또는 @Main 어노테이션이 있는 클래스를 찾아 AppDelgate 객체 생성
3. Main Event Loop를 실행(touch,text input 등 사용자의 액션을 받는 루프)

자, 그러면 Main Run Loop라는 것은 유저가 일으키는 이벤트들을 처리하는 프로세스이다.
순서는
1. 유저가 이벤트를 일으킨다(버튼터치, 화면 스와이프 등)
2. 시스템을 통해 이벤트가 생성된다.
3. UIKit 프레임워크를 통해 생성된 port로 해당 이벤트가 앱으로 전달된다.
4. 이벤트는 앱 내부적으로 Queue의 헝태로 정리되고 Event Queue에 쌓인다.
5. Event Queue에 있는 이벤트들이 Main Run Loop에 하나씩 매핑된다.
6. UIApplication객체는 이때 가장 먼저 이벤트를 객체로 어떤 것이 실행되어야 하는지 결정한다.

자!! 여기까지가 사용자가 앱에 이벤트를 전달한 후 앱의 실행까지 어떤 과정을 통해 이뤄지는지 알아보았다.
앞에는 과정이라면 이제는 앱실행전, 실행 후 상태를 알아보자

#)앱 상태
앱의 상태는 총 5가지로(NotRunning, Foreground(Inactive, active), Background, Suspend 로 구분이 된다.

순서)
1. Not Running: 앱이 실행되지 않았거나, 완전히 종료되어 동작하지 않는 상태
2. Inactive(Foreground) : 앱이 실행되면서 Foreground에 진입하지만, 어떠한 이벤트도 받지 않는 상태
3. active(Foreground) : 앱이 실행 중이며, foreground에 있고, 이벤트를 받고있는 상태이다
4. Background : 다른 앱으로 전환되었거나 홈버튼을 눌러 밖으로 나갔을 때의 상태입니다,
                일정시간이 지나 앱을 Suspended 상태로 바뀌게 된다.(Suspended와 차이점은 실행되는 코드가 있냐없냐이다)
5. Suspended : 백그라운드에서 특별한 작업이 없을 경우 Suspended 상태가 된다.
이상태에서 앱은 메모리 상에 올라가있지만 아무 일도 하지 않기 때문에 배터리를 사용하지 않는다.
또한 OS에 의해 메모리 부족현상이 발생하면 이 상태의 앱은 메모리에서 없어질 수 있으며, 이는 따로 알림을 하진 않는다.

---------------------------

#)AppDelegate 객체의 메소드 호출
앱의 생명주기(foreground,background에서 SceneDelegate의 메소드 씀)에 따라서
AppDelegate객체의 SceneDelegate에서 특정 메소드를 호출하게 된다.

1-1. Not Running일때(실행x, 준비끝나기 직전)
application(_:willFinishLaunchingWithOptions:)
위 메소드 안에는 앱을 실행할 때 최초로 실행할 코드를 작성한다.
필요한 주요 객체들을 생성하고 앱 실행 준비가 끝나기 직전에 호출된다.

1-2 Not Running일때(실행x, 준비끝난 후)
applicationDidFinishLaunching(_:)
앱 실행을 위한 모든 준비가 끝난 후 화면이 사용자에게 보여지기 직전에 호출된다.
주로 초기화 코드를 이곳에다 작성한다.

1-3 Not Running일때(실행x, 앱이 종료되기 직전에 호출)
applicationWillTerminate(_:)

2. In-Active 상태일 때(앱이 forground 이지만, 이벤트는 받지 않는 상태)
sceneWillEnterForeground(_:)
앱이 background나 not running에서 foreground로 들어가기 직전에 호출된다.
비활성화 상태를 거쳐 활성화 상태가 된다.

sceneWillResignActive(_:)
AppSwitcher모드(홈 바 쓸어 올렸을 경우)

3. Active 상태일 때
sceneDidBecomeActive(_:)
앱이 비활성화상태에서 활성상태로 진입하고 난 직후 호출된다.

4. Background 상태
sceneDidEnterBackground(_:)
앱이 background 상태로 들어갔을 때 호출된다.
suspended 상태가 되기 전 중요한 데이터를 저장하는 등 종료하기 전 필요한 작업을 한다.

5. suspended 상태
따로 호출되는 메소드는 없으며 background 상태에서 특별한 작업이 없을 때 이상태가 된다.

-----------------------------------
#) ~ios12버전에서는 SceneDelegate 없음.
   13버전부터는 SceneDelegate 있음.
   
 
#) 그러면 ~ios12까지(Scene을 지원하지 않는 경우) 동작을 보자
Scene을 지원하지 않는 경우, 모든 생명주기 이벤트들은 appDelegate에 전달된다.
각각의 상태에 접근하기 위해 사용되는 파일이 Appdelegate.swift 이다.
ios앱 프로젝트를 생성하면 Appdelegate.swift 파일이 자동으로 생성된다.

Appdelegate는 이름 그대로 앱과 시스템의 연결을 위해 필요한 delegate 메소드를 담고 있다.

//Appdelegate.swift
import UIKit

@UIApplicationMain
class Appdelegate: UIResponder, UIApplicationDelegate {
	
	var window: UIWindow?
	
	func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
		return true
	}
	
	//앱이 active에서 inactive로 이동될 때 실행
	func applicationWillResignActive(_ application: UIApplication) {
	}
	
	//앱이 background 상태일 때 실행
	func applicationDidEnterBackground(_ application: UIApplication) {
	}
	
	//앱이 background에서 foreground로 이동될 때 실행(아직 foreground에서 실행x)
	func applicationWillEnterForeground(_ application: UIApplication) {
	}
	
	//앱이 active상태가 되어 실행 중 일때
	func applicationDidBecomeActive(_ application: UIApplication) {
	}
	
	//앱이 종료될 때 실행
	func applicationWillTerminate(_ application: UIApplication) {
	}
}

위의 코드를 보면 Appdelegate 객체는 UIResponder와 UIApplicationDelegate을 상속 및 참조하고있다.
먼저, UIResponder는 앱에서 발생하는 이벤트들을 담고 있는 추상형 인터페이스 객체로 View와 사용자의 이벤트간의 연결을 관리

그다음, UIApplicationDelegate는 UIApplication객체의 작업에 개발자가 접근할 수 있도록 하는 메서드들을 담고 있다.
예를들어, didFinishLaunchingWithOptions, applicationWillResignActive 등과 같은 메소드를 통해 앱의 상태가 변할 때 수행할 작업들을 설정할 수 있다.

appDelegate 객체는 app의 모든 window를 관맇가ㅣ 때문에,
앱의 상태 변화는 앱의 모든 UI에 영향을 미친다.


#) ios13버전부터의 동작(Scene을 지원하는 경우)
SceneDelegate는 IOS13부터 추가된 클래스이다.
SceneDelegate는 UI 생명주기를 관리하는 클래스이다.
IOS12버전 까지는 하나의 앱이 하나의 윈도우만 가지기때문에 AppDelegate클래스가 UI 생명주기도 관리했어야했다.

하지만, IOS13부터 하나의 앱에 여러 개의 윈도우를 동시에 사용할 수 있게 되었기 때문에 UI 생명주기를 전담 관리해줄 클래스가 필요했는데
그게 SceneDelegate 클래스이다.

즉, Scene을 지원하는 경우, Scene별로 별도의 생명주기를 가지게 된다.
scene하나는 디바이스에서 돌아가는 앱의 UI인스턴스 하나를 나타낸다.
하나의 앱은 여러개의 Scene을 가질 수 있으며, 이를 개별적으로 띄우거나 숨길 수 있다.

사용자나 시스템이 새로운 scene을 만들어달라고 요청하면,
UIKit은 이를 만들어 unattached 상태로 만든다.
사용자가 요청한 scene은 곧장 foreground inactive 상태를 거쳐 active상태가 되고,
시스템이 요청한 scene은 보통 background 상태가 되어 이벤트 처리한 뒤에 foreground로 올라온다.

=========================================================================================
#)위에 방식은 console로 결과를 띄우는 방식이고 아래방식은 아이폰에서 띄우는 방식이다.
//  Book.h
//  BookManager

#import <Foundation/Foundation.h>

@interface Book : NSObject
//프로퍼티로 getter,setter자동
//strong은 객체를 첨조하고있다.라는 의미
@property (nonatomic, strong) NSString *name; //값에 동시에 접근할 필요가 업어서 non으로설정
@property (nonatomic, strong) NSString *genre;
@property (nonatomic, strong) NSString *author;

-(void)bookPrint;

@end

------------------------
//
//  Book.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "Book.h"
@implementation Book
@synthesize name,genre,author;

-(void)bookPrint {
    NSLog(@"Name: %@", name);
    NSLog(@"Name: %@", genre);
    NSLog(@"Name: %@", author);
}

@end

---------------------------
//
//  BookManager.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <Foundation/Foundation.h>

//배열이 몇개들어올지 모르니까 늘어날수도있어서 mutable로 한다
@class Book; //컴파일오류 방지하기 위해 선언-> 컴파일이 빨라진다. import하는것보다
@interface BookManager : NSObject { //BookManager 클래스안에 bookList라는 변수가있다.
    NSMutableArray *bookList;
}

//아래에 함수들이 구현되어있다.
-(void)addBook:(Book *)bookObject;  //book객체를 인자로받는다
-(NSString *)showAllBook;
-(NSUInteger)countBook; //책 갯수
-(NSString *)findBook:(NSString *)name; //책검색, 없으면 nil반환
-(NSString *)removeBook:(NSString *)name;

@end

------------------------
//
//  BookManager.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "BookManager.h"
#import "Book.h"

@implementation BookManager
    //초기화코드
-(id)init {
    self = [super init];
    if(self) {
        bookList = [[NSMutableArray alloc]init];
    }
    return self;
}

-(void)addBook:(Book *)bookObject {
    [bookList addObject:bookObject];   //받은 bookObject를 추가
}
-(NSString *)showAllBook {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    
    for(Book *bookTemp in bookList) {
        //누적시키기
        [strTemp appendString:@"Name: "];
        [strTemp appendString:bookTemp.name];
        [strTemp appendString:@"\n"];
        [strTemp appendString:@"genre: "];
        [strTemp appendString:bookTemp.genre];
        [strTemp appendString:@"author: "];
        [strTemp appendString:bookTemp.author];
    }
    return strTemp;
}

-(NSUInteger)countBook {
    return [bookList count];
}

-(NSString *)findBook:(NSString *)name {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    for (Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) { //문자열비교
            [strTemp appendString:@"Name: "];
            [strTemp appendString:bookTemp.name];
            [strTemp appendString:@"\n"];
            [strTemp appendString:@"genre: "];
            [strTemp appendString:bookTemp.genre];
            [strTemp appendString:@"author: "];
            [strTemp appendString:bookTemp.author];
            
            return strTemp;
        }
    }
    return nil;
}
-(NSString *)removeBook:(NSString *)name {
    for(Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) {
            [bookList removeObject:bookTemp];
            return name;
        }
    }
    return nil;
}

@end

-------------------------------
//
//  ViewController.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <UIKit/UIKit.h>
@class BookManager; //전역변수로 만들기 위해 추가

@interface ViewController : UIViewController {
    BookManager *myBook; //전역변수로 만들기 위해 추가 (myBook을 다른곳에서도 사용하기 위해)
}
@end

---------------------------------
//
//  ViewController.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "ViewController.h"

@interface ViewController ()
//헤더부분을 import해줘야 된다
#import "BookManager.h"
#import "Book.h"

@implementation ViewController //위에서 선언한 -> 안에는 BookManager라는 변수가 들어가있다.

- (void)viewDidLoad { //뷰가 로딩되자마자 자동으로 실행되는 부분
                      //그래서 초기화 코드는 여기 넣으면된다
    [super viewDidLoad];
    Book *book1 = [[Book alloc]init];
    book1.name = @"햄릿";
    book1.genre = @"비극";
    book1.author=@"세익스피어";
    
    [book1 bookPrint];
    
    Book *book2 = [[Book alloc]init];
    book2.name = @"누구를 위하여 종을 울리나";
    book2.genre = @"전쟁소설";
    book2.author=@"헤밍웨이";
    
    [book2 bookPrint];
    
    Book *book3 = [[Book alloc]init];
    book3.name = @"죄와 벌";
    book3.genre = @"사실주의";
    book3.author=@"톨스토이";
    
    [book3 bookPrint];
    
    //아래 부분은 지역변수이므로 전역변수로 사용하기 위해 주석처리 한 후 viewController.h에 @classname으로 선언함
    //BookManager *myBook = [[BookManager alloc]init];
    myBook = [[BookManager alloc]init];
    [myBook addBook:book1];
    [myBook addBook:book2];
    [myBook addBook:book3];
}


@end
==============================================================
//현재 화면 구성


        전체 보기(button)  //이거를 클릭한다

      --textview(전체보기 눌렸을 때 책목록 띄우게)
      |                               |
      |                               |
      |--------------------------------

---------------------------------------------
//
//  Book.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//
//여기는 헤더부분
#import <Foundation/Foundation.h>

@interface Book : NSObject

//프로퍼티로 getter,setter자동으로 선언됨
//strong은 객체를 첨조하고있다.라는 의미
@property (nonatomic, strong) NSString *name; //값에 동시에 접근할 필요가 업어서 non으로설정
@property (nonatomic, strong) NSString *genre;
@property (nonatomic, strong) NSString *author;

-(void)bookPrint;

@end

------------------------
//
//  Book.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "Book.h"

@implementation Book
@synthesize name,genre,author;

-(void)bookPrint {
    NSLog(@"Name: %@", name);
    NSLog(@"Name: %@", genre);
    NSLog(@"Name: %@", author);
}

@end

--------------------------
//
//  BookManager.h
//  BookManager
//

#import <Foundation/Foundation.h>
@class Book;
@interface BookManager : NSObject{
    NSMutableArray *bookList;
}

-(void)addBook:(Book *)bookObject;
-(NSString *)showAllBook;
-(NSUInteger)countBook;
-(NSString *)findBook:(NSString *)name;
-(NSString *)removeBook:(NSString *)name;
@end


----------------------------
//
//  BookManager.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "BookManager.h"
#import "Book.h"

@implementation BookManager
    //초기화코드
-(id)init {
    self = [super init];
    if(self) {
        bookList = [[NSMutableArray alloc]init];
    }
    return self;
}

-(void)addBook:(Book *)bookObject {
    [bookList addObject:bookObject];   //받은 bookObject를 추가
}
-(NSString *)showAllBook {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    
    for(Book *bookTemp in bookList) {
        //누적시키기
        [strTemp appendString:@"Name: "];
        [strTemp appendString:bookTemp.name];
        [strTemp appendString:@"\n"];
        [strTemp appendString:@"genre: "];
        [strTemp appendString:bookTemp.genre];
        [strTemp appendString:@"author: "];
        [strTemp appendString:bookTemp.author];
    }
    return strTemp;
}

-(NSUInteger)countBook {
    return [bookList count];
}

-(NSString *)findBook:(NSString *)name {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    for (Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) { //문자열비교
            [strTemp appendString:@"Name: "];
            [strTemp appendString:bookTemp.name];
            [strTemp appendString:@"\n"];
            [strTemp appendString:@"genre: "];
            [strTemp appendString:bookTemp.genre];
            [strTemp appendString:@"author: "];
            [strTemp appendString:bookTemp.author];
            
            return strTemp;
        }
    }
    return nil;
}
-(NSString *)removeBook:(NSString *)name {
    for(Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) {
            [bookList removeObject:bookTemp];
            return name;
        }
    }
    return nil;
}

@end

---------------------------
//
//  ViewController.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <UIKit/UIKit.h>

@class BookManager;

@interface ViewController : UIViewController {
    BookManager *myBook;
}

//이거하면 ViewController.m쪽에 @synthesiz 선언해야함
//이거를 main스토리보드에 끌어놓기(폰모양 맨위에 첫번째동그라미 선택
//-> 우측속성상단에 젤끝에 show conntections inspector
//-> 해당 resultTextView를 텍스트박스에 끌어놓으면 됨

//또는 스토리보드에 있는 textView를 누르고 control누른상태에서 소스코드로 드래그하면 Name을 입력할수있다.그게 resultTextView이다.
@property (nonatomic, strong) IBOutlet UITextView *resultTextView;

//선언했으니 구현하러가자
-(IBAction)showAllBookAction:(id)sender;

@end


------------------------------
//
//  ViewController.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "ViewController.h"
//import해줘야 된다
#import "BookManager.h"
#import "Book.h"
@interface ViewController ()

@end

@implementation ViewController
@synthesize resultTextView;

- (void)viewDidLoad { //뷰가 로딩되자마자 자동으로 실행되는 부분
                      //그래서 초기화 코드는 여기 넣으면된다
    [super viewDidLoad];
    Book *book1 = [[Book alloc]init];
    book1.name = @"햄릿";
    book1.genre = @"비극";
    book1.author=@"세익스피어";
    
    [book1 bookPrint];
    
    Book *book2 = [[Book alloc]init];
    book2.name = @"누구를 위하여 종을 울리나";
    book2.genre = @"전쟁소설";
    book2.author=@"헤밍웨이";
    
    [book2 bookPrint];
    
    Book *book3 = [[Book alloc]init];
    book3.name = @"죄와 벌";
    book3.genre = @"사실주의";
    book3.author=@"톨스토이";
    
    [book3 bookPrint];
    
    //아래 부분은 지역변수이므로 전역변수로 사용하기 위해 주석처리 한 후 viewController.h에 @classname으로 선언함
    //BookManager *myBook = [[BookManager alloc]init];
    myBook = [[BookManager alloc]init];
    [myBook addBook:book1];
    [myBook addBook:book2];
    [myBook addBook:book3];
}

//전체 보기 버튼누르면 동작(전체보기버튼을 여기다가 끌어놓은 후에)
-(IBAction)showAllBookAction:(id)sender {
    //NSLog(@"%@", [myBook showAllBook]);
    //UITextView가 @property(nonatomic,copy) NSString *text
    //를 만들어 주고 있기 때문에 getter, setter까지 구현되있다는소리
    //그래서 아래처럼 바로 text로 접근해서 문자열을 바로 대입
    resultTextView.text = [myBook showAllBook];
    
    //아니면 이렇게 해도된다
    [resultTextView setText:[myBook showAllBook]];
}

@end

================================================================
//IBOutlet은 코드에 정의된 변수와 화면의 객체를 연결하는 것이고
//IBAction은 Event가 일어난 경우 호출되는 Action을 정의해둔 것이다.

//IBOutlet이나 IBAction태그를 통해 StoryBoard와의 연결고리를 담당한다.
변수나 함수를 정의할 떄 앞에 @IBOutlet 또는 @IBAction 키워드를 작성해 StoryBoard에서
버튼이나 레이블같은 컴포넌트와 연결이 가능하다.

#)IBAction, IBOutlet의 정의
일단, Action과 Outlet은 어느정도 의미가 짐작이 된다. 
말 그대로 Action은 입력이 들어왔을때 어떤 행동을 할 지를 나타내고 Outlet은 데이터를 가져오는 것이다. 
앞에 있는 IB는 Interface Builder의 약자이다. 즉 IBAction은 Interface Builder를 통해 받아온 정보로 Action을 수행하겠다는 의미.

===================================================================
//예시) 슬라이드 값을 반올림하여 변수에 저장
@IBAction func sliderMoved(_ sender: UISlider) {
	currentValue = lroundf(slider.value)
}
scoreLabel.text = String(currentValue)  // Label은 String 타입으로 currentValue가 Int형이므로 앞에 String을 해준다.

================================================================
//textfield는 한줄만 입력 받는다
//현재 화면 구성
        도서 관리 프로그램(label)

(label)이름: (textfield)
(label)장르: (textfield)
(label)저자: (textfield) 

    등록(button)  전체 보기(button)

      --textview(전체보기 눌렸을 때 책목록 띄우게)
      |                               |
      |                               |
      |--------------------------------


------------------------------
//
//  Book.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <Foundation/Foundation.h>

@interface Book : NSObject

//프로퍼티로 getter,setter자동
//strong은 객체를 첨조하고있다.라는 의미
@property (nonatomic, strong) NSString *name; //값에 동시에 접근할 필요가 업어서 non으로설정
@property (nonatomic, strong) NSString *genre;
@property (nonatomic, strong) NSString *author;

-(void)bookPrint;

@end

---------------------------------
//
//  Book.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "Book.h"

@implementation Book
@synthesize name,genre,author;

-(void)bookPrint {
    NSLog(@"Name: %@", name);
    NSLog(@"Name: %@", genre);
    NSLog(@"Name: %@", author);
}

@end

---------------------------------
//
//  BookManager.h
//  BookManager
//

#import <Foundation/Foundation.h>
@class Book;
@interface BookManager : NSObject{
    NSMutableArray *bookList;
}

-(void)addBook:(Book *)bookObject;
-(NSString *)showAllBook;
-(NSUInteger)countBook;
-(NSString *)findBook:(NSString *)name;
-(NSString *)removeBook:(NSString *)name;
@end


----------------------------------
//
//  BookManager.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "BookManager.h"
#import "Book.h"

@implementation BookManager
    //초기화코드
-(id)init {
    self = [super init];
    if(self) {
        bookList = [[NSMutableArray alloc]init];
    }
    return self;
}

-(void)addBook:(Book *)bookObject {
    [bookList addObject:bookObject];   //받은 bookObject를 추가
}
-(NSString *)showAllBook {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    
    for(Book *bookTemp in bookList) {
        //누적시키기
        [strTemp appendString:@"Name: "];
        [strTemp appendString:bookTemp.name];
        [strTemp appendString:@"\n"];
        [strTemp appendString:@"genre: "];
        [strTemp appendString:bookTemp.genre];
        [strTemp appendString:@"author: "];
        [strTemp appendString:bookTemp.author];
    }
    return strTemp;
}

-(NSUInteger)countBook {
    return [bookList count];
}

-(NSString *)findBook:(NSString *)name {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    for (Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) { //문자열비교
            [strTemp appendString:@"Name: "];
            [strTemp appendString:bookTemp.name];
            [strTemp appendString:@"\n"];
            [strTemp appendString:@"genre: "];
            [strTemp appendString:bookTemp.genre];
            [strTemp appendString:@"author: "];
            [strTemp appendString:bookTemp.author];
            
            return strTemp;
        }
    }
    return nil;
}
-(NSString *)removeBook:(NSString *)name {
    for(Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) {
            [bookList removeObject:bookTemp];
            return name;
        }
    }
    return nil;
}

@end

----------------------------
//
//  ViewController.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <UIKit/UIKit.h>

@class BookManager;

@interface ViewController : UIViewController {
    BookManager *myBook;
}

@property (nonatomic, strong) IBOutlet UITextView *resultTextView;

//등록할 때 입력받은 값(textfield)을 갖고오기위해 -> synthesize작성해야함
@property (nonatomic, strong) IBOutlet UITextField *nameTextField;
@property (nonatomic, strong) IBOutlet UITextField *genreTextField;
@property (nonatomic, strong) IBOutlet UITextField *authorTextField;

//선언했으니 구현하러가자
-(IBAction)showAllBookAction:(id)sender;

//등록버튼
-(IBAction)addBookAction:(id)sender;



@end


------------------------------
//
//  ViewController.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "ViewController.h"
//import해줘야 된다
#import "BookManager.h"
#import "Book.h"
@interface ViewController ()

@end

@implementation ViewController
@synthesize resultTextView,nameTextField,genreTextField,authorTextField;

- (void)viewDidLoad { //뷰가 로딩되자마자 자동으로 실행되는 부분
                      //그래서 초기화 코드는 여기 넣으면된다
    [super viewDidLoad];
    Book *book1 = [[Book alloc]init];
    book1.name = @"햄릿";
    book1.genre = @"비극";
    book1.author=@"세익스피어";
    
    [book1 bookPrint];
    
    Book *book2 = [[Book alloc]init];
    book2.name = @"누구를 위하여 종을 울리나";
    book2.genre = @"전쟁소설";
    book2.author=@"헤밍웨이";
    
    [book2 bookPrint];
    
    Book *book3 = [[Book alloc]init];
    book3.name = @"죄와 벌";
    book3.genre = @"사실주의";
    book3.author=@"톨스토이";
    
    [book3 bookPrint];
    
    //아래 부분은 지역변수이므로 전역변수로 사용하기 위해 주석처리 한 후 viewController.h에 @classname으로 선언함
    //BookManager *myBook = [[BookManager alloc]init];
    myBook = [[BookManager alloc]init];
    [myBook addBook:book1];
    [myBook addBook:book2];
    [myBook addBook:book3];
}

//전체 보기 버튼누르면 동작(전체보기버튼을 여기다가 끌어놓은 후에)
-(IBAction)showAllBookAction:(id)sender {
    resultTextView.text = [myBook showAllBook];
}

-(IBAction)addBookAction:(id)sender {
    Book *bookTemp = [[Book alloc]init];
    bookTemp.name = nameTextField.text;
    bookTemp.genre = genreTextField.text;
    bookTemp.author = authorTextField.text;
    
    [myBook addBook:bookTemp]; //등록한 책 추가
    resultTextView.text = @"책이 추가 됐습니다";
}
@end
===========================================================
//textfield는 한줄만 입력 받는다
//현재 화면 구성
        도서 관리 프로그램(label)

(label)이름: (textfield)
(label)장르: (textfield)
(label)저자: (textfield) 

    등록(button) 검색(button) 
    
                전체 보기(button) 

      --textview(전체보기 눌렸을 때 책목록 띄우게)
      |                               |
      |                               |
      |--------------------------------


------------------------------
//
//  Book.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <Foundation/Foundation.h>

@interface Book : NSObject

//프로퍼티로 getter,setter자동
//strong은 객체를 첨조하고있다.라는 의미
@property (nonatomic, strong) NSString *name; //값에 동시에 접근할 필요가 업어서 non으로설정
@property (nonatomic, strong) NSString *genre;
@property (nonatomic, strong) NSString *author;
-(void)bookPrint;

@end

--------------------------------
//
//  Book.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "Book.h"

@implementation Book
@synthesize name,genre,author;

-(void)bookPrint {
    NSLog(@"Name: %@", name);
    NSLog(@"Name: %@", genre);
    NSLog(@"Name: %@", author);
}

@end

--------------------------------
//
//  BookManager.h
//  BookManager
//

#import <Foundation/Foundation.h>
@class Book;
@interface BookManager : NSObject{
    NSMutableArray *bookList;
}
-(void)addBook:(Book *)bookObject;
-(NSString *)showAllBook;
-(NSUInteger)countBook;
-(NSString *)findBook:(NSString *)name;
-(NSString *)removeBook:(NSString *)name;
@end

-------------------------------
//
//  BookManager.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "BookManager.h"
#import "Book.h"

@implementation BookManager
    //초기화코드
-(id)init {
    self = [super init];
    if(self) {
        bookList = [[NSMutableArray alloc]init];
    }
    return self;
}

-(void)addBook:(Book *)bookObject {
    [bookList addObject:bookObject];   //받은 bookObject를 추가
}
-(NSString *)showAllBook {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    
    for(Book *bookTemp in bookList) {
        //누적시키기
        [strTemp appendString:@"Name: "];
        [strTemp appendString:bookTemp.name];
        [strTemp appendString:@"\n"];
        [strTemp appendString:@"genre: "];
        [strTemp appendString:bookTemp.genre];
        [strTemp appendString:@"author: "];
        [strTemp appendString:bookTemp.author];
    }
    return strTemp;
}

-(NSUInteger)countBook {
    return [bookList count];
}

-(NSString *)findBook:(NSString *)name {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    for (Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) { //문자열비교
            [strTemp appendString:@"Name: "];
            [strTemp appendString:bookTemp.name];
            [strTemp appendString:@"\n"];
            [strTemp appendString:@"genre: "];
            [strTemp appendString:bookTemp.genre];
            [strTemp appendString:@"author: "];
            [strTemp appendString:bookTemp.author];
            
            return strTemp;
        }
    }
    return nil;
}
-(NSString *)removeBook:(NSString *)name {
    for(Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) {
            [bookList removeObject:bookTemp];
            return name;
        }
    }
    return nil;
}

@end
----------------------------------
//
//  ViewController.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <UIKit/UIKit.h>

@class BookManager;

@interface ViewController : UIViewController {
    BookManager *myBook;
}

@property (nonatomic, strong) IBOutlet UITextView *resultTextView;

//등록할 때 입력받은 값(textfield)을 갖고오기위해 -> synthesize작성해야함
@property (nonatomic, strong) IBOutlet UITextField *nameTextField;
@property (nonatomic, strong) IBOutlet UITextField *genreTextField;
@property (nonatomic, strong) IBOutlet UITextField *authorTextField;
//선언했으니 구현하러가자
-(IBAction)showAllBookAction:(id)sender;

//등록버튼
-(IBAction)addBookAction:(id)sender;

//검색버튼
-(IBAction)findBookAction:(id)sender;

@end

---------------------------------
//
//  ViewController.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "ViewController.h"
//import해줘야 된다
#import "BookManager.h"
#import "Book.h"
@interface ViewController ()

@end

@implementation ViewController
@synthesize resultTextView,nameTextField,genreTextField,authorTextField;

- (void)viewDidLoad { //뷰가 로딩되자마자 자동으로 실행되는 부분
                      //그래서 초기화 코드는 여기 넣으면된다
    [super viewDidLoad];
    Book *book1 = [[Book alloc]init];
    book1.name = @"햄릿";
    book1.genre = @"비극";
    book1.author=@"세익스피어";
    
    [book1 bookPrint];
    
    Book *book2 = [[Book alloc]init];
    book2.name = @"누구를 위하여 종을 울리나";
    book2.genre = @"전쟁소설";
    book2.author=@"헤밍웨이";
    
    [book2 bookPrint];
    
    Book *book3 = [[Book alloc]init];
    book3.name = @"죄와 벌";
    book3.genre = @"사실주의";
    book3.author=@"톨스토이";
    
    [book3 bookPrint];
    
    //아래 부분은 지역변수이므로 전역변수로 사용하기 위해 주석처리 한 후 viewController.h에 @classname으로 선언함
    //BookManager *myBook = [[BookManager alloc]init];
    myBook = [[BookManager alloc]init];
    [myBook addBook:book1];
    [myBook addBook:book2];
    [myBook addBook:book3];
}

//전체 보기 버튼누르면 동작(전체보기버튼을 여기다가 끌어놓은 후에)
-(IBAction)showAllBookAction:(id)sender {
    resultTextView.text = [myBook showAllBook];
}

-(IBAction)addBookAction:(id)sender {
    Book *bookTemp = [[Book alloc]init];
    bookTemp.name = nameTextField.text;
    bookTemp.genre = genreTextField.text;
    bookTemp.author = authorTextField.text;
    
    [myBook addBook:bookTemp]; //등록한 책 추가
    resultTextView.text = @"책이 추가 됐습니다";
}

-(IBAction)findBookAction:(id)sender {
    NSString *strTemp = [myBook findBook:nameTextField.text];
    if(strTemp != nil) {
        resultTextView.text = strTemp;
    }else {
        resultTextView.text = @"찾으시는 책이 없네요";
    }
}

@end
===============================================
//현재 화면 구성
        도서 관리 프로그램(label)

(label)이름: (textfield)
(label)장르: (textfield)
(label)저자: (textfield) 

    등록(button) 검색(button)  삭제(button)
    
                전체 보기(button) 

      --textview(전체보기 눌렸을 때 책목록 띄우게)
      |                               |
      |                               |
      |--------------------------------



//
//  Book.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <Foundation/Foundation.h>

@interface Book : NSObject    //Book이라는 클래스는 아래의 변수들과 bookPrint라는 메서드를 가지고 있다.

//프로퍼티로 getter,setter자동
//strong은 객체를 첨조하고있다.라는 의미
@property (nonatomic, strong) NSString *name; //값에 동시에 접근할 필요가 업어서 non으로설정
@property (nonatomic, strong) NSString *genre;
@property (nonatomic, strong) NSString *author;

-(void)bookPrint;

@end

---------------------------
//
//  Book.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "Book.h"

@implementation Book
@synthesize name,genre,author;

-(void)bookPrint {
    NSLog(@"Name: %@", name);
    NSLog(@"Name: %@", genre);
    NSLog(@"Name: %@", author);
}

@end

---------------------------
//
//  BookManager.h
//  BookManager
//

#import <Foundation/Foundation.h>
@class Book;  //Book이라는 클래스를 쓰기위해서 자바처럼 import를 한것이다. addBook메서드에서 쓰이는걸 볼 수 있다.
@interface BookManager : NSObject{
    NSMutableArray *bookList;
}

-(void)addBook:(Book *)bookObject;
-(NSString *)showAllBook;
-(NSUInteger)countBook;
-(NSString *)findBook:(NSString *)name;
-(NSString *)removeBook:(NSString *)name;
@end

---------------------------
//
//  BookManager.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "BookManager.h"
#import "Book.h"

@implementation BookManager
    //초기화코드
-(id)init {
    self = [super init];
    if(self) {
        bookList = [[NSMutableArray alloc]init];
    }
    return self;
}

-(void)addBook:(Book *)bookObject {
    [bookList addObject:bookObject];   //받은 bookObject를 추가
}
-(NSString *)showAllBook {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    
    for(Book *bookTemp in bookList) {
        //누적시키기
        [strTemp appendString:@"Name: "];
        [strTemp appendString:bookTemp.name];
        [strTemp appendString:@"\n"];
        [strTemp appendString:@"genre: "];
        [strTemp appendString:bookTemp.genre];
        [strTemp appendString:@"author: "];
        [strTemp appendString:bookTemp.author];
    }
    return strTemp;
}

-(NSUInteger)countBook {
    return [bookList count];
}

-(NSString *)findBook:(NSString *)name {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    for (Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) { //문자열비교
            [strTemp appendString:@"Name: "];
            [strTemp appendString:bookTemp.name];
            [strTemp appendString:@"\n"];
            [strTemp appendString:@"genre: "];
            [strTemp appendString:bookTemp.genre];
            [strTemp appendString:@"author: "];
            [strTemp appendString:bookTemp.author];
            
            return strTemp;
        }
    }
    return nil;
}
-(NSString *)removeBook:(NSString *)name {
    for(Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) {
            [bookList removeObject:bookTemp];
            return name;
        }
    }
    return nil;
}

@end

---------------------------------
//
//  ViewController.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <UIKit/UIKit.h>

@class BookManager; //BookManager라는 class를 쓰기위해서 자바처럼 import한것이다.

@interface ViewController : UIViewController {
    BookManager *myBook;
}

@property (nonatomic, strong) IBOutlet UITextView *resultTextView;

//등록할 때 입력받은 값(textfield)을 갖고오기위해 -> synthesize작성해야함
//변수
@property (nonatomic, strong) IBOutlet UITextField *nameTextField;
@property (nonatomic, strong) IBOutlet UITextField *genreTextField;
@property (nonatomic, strong) IBOutlet UITextField *authorTextField;

//메서드들
//선언했으니 구현하러가자
-(IBAction)showAllBookAction:(id)sender;

//등록버튼
-(IBAction)addBookAction:(id)sender;

//검색버튼
-(IBAction)findBookAction:(id)sender;

//삭제버튼
-(IBAction)removeBookAction:(id)sender;

@end

-----------------------------
//
//  ViewController.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "ViewController.h"
//import해줘야 된다
#import "BookManager.h"
#import "Book.h"
@interface ViewController ()

@end

@implementation ViewController
@synthesize resultTextView,nameTextField,genreTextField,authorTextField;

- (void)viewDidLoad { //뷰가 로딩되자마자 자동으로 실행되는 부분
                      //그래서 초기화 코드는 여기 넣으면된다
    [super viewDidLoad];
    Book *book1 = [[Book alloc]init];
    book1.name = @"햄릿";
    book1.genre = @"비극";
    book1.author=@"세익스피어";
    
    [book1 bookPrint];
    
    Book *book2 = [[Book alloc]init];
    book2.name = @"누구를 위하여 종을 울리나";
    book2.genre = @"전쟁소설";
    book2.author=@"헤밍웨이";
    
    [book2 bookPrint];
    
    Book *book3 = [[Book alloc]init];
    book3.name = @"죄와 벌";
    book3.genre = @"사실주의";
    book3.author=@"톨스토이";
    
    [book3 bookPrint];
    
    //아래 부분은 지역변수이므로 전역변수로 사용하기 위해 주석처리 한 후 viewController.h에 @classname으로 선언함
    //BookManager *myBook = [[BookManager alloc]init];
    myBook = [[BookManager alloc]init];
    [myBook addBook:book1];
    [myBook addBook:book2];
    [myBook addBook:book3];
}

//전체 보기 버튼누르면 동작(전체보기버튼을 여기다가 끌어놓은 후에)
-(IBAction)showAllBookAction:(id)sender {
    resultTextView.text = [myBook showAllBook];
}

-(IBAction)addBookAction:(id)sender {
    Book *bookTemp = [[Book alloc]init];
    bookTemp.name = nameTextField.text;
    bookTemp.genre = genreTextField.text;
    bookTemp.author = authorTextField.text;
    
    [myBook addBook:bookTemp]; //등록한 책 추가
    resultTextView.text = @"책이 추가 됐습니다";
}

-(IBAction)findBookAction:(id)sender {
    NSString *strTemp = [myBook findBook:nameTextField.text];
    if(strTemp != nil) {
        resultTextView.text = strTemp;
    }else {
        resultTextView.text = @"찾으시는 책이 없네요";
    }
}

-(IBAction)removeBookAction:(id)sender {
    NSString *strTemp = [myBook removeBook:nameTextField.text];
    if(strTemp != nil) {
        //변형가능한 Mutable로
        NSMutableString *str = [[NSMutableString alloc]init];
        [str appendString:strTemp];
        [str appendString:@"책이 지워졌습니다"];
        resultTextView.text = str;
    }else {
        resultTextView.text = @"지울려는 책이 없습니다";
    }
}

@end
====================================================
//현재 화면 구성
        도서 관리 프로그램(label)
        
    전체도서개수: (label)

(label)이름: (textfield)
(label)장르: (textfield)
(label)저자: (textfield) 

    등록(button) 검색(button)  삭제(button)
    
                전체 보기(button) 

      --textview(전체보기 눌렸을 때 책목록 띄우게)
      |                               |
      |                               |
      |--------------------------------



--------------------------
//
//  Book.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <Foundation/Foundation.h>

@interface Book : NSObject

//프로퍼티로 getter,setter자동
//strong은 객체를 첨조하고있다.라는 의미
@property (nonatomic, strong) NSString *name; //값에 동시에 접근할 필요가 업어서 non으로설정
@property (nonatomic, strong) NSString *genre;
@property (nonatomic, strong) NSString *author;

-(void)bookPrint;

@end

---------------------------------
//
//  Book.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "Book.h"

@implementation Book
@synthesize name,genre,author;

-(void)bookPrint {
    NSLog(@"Name: %@", name);
    NSLog(@"Name: %@", genre);
    NSLog(@"Name: %@", author);
}

@end

-------------------------------------
//
//  BookManager.h
//  BookManager
//

#import <Foundation/Foundation.h>
@class Book;
@interface BookManager : NSObject{
    NSMutableArray *bookList;
}

-(void)addBook:(Book *)bookObject;
-(NSString *)showAllBook;
-(NSUInteger)countBook;
-(NSString *)findBook:(NSString *)name;
-(NSString *)removeBook:(NSString *)name;
@end

---------------------------------------
//
//  BookManager.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "BookManager.h"
#import "Book.h"

@implementation BookManager
    //초기화코드
-(id)init {
    self = [super init];
    if(self) {
        bookList = [[NSMutableArray alloc]init];
    }
    return self;
}

-(void)addBook:(Book *)bookObject {
    [bookList addObject:bookObject];   //받은 bookObject를 추가
}
-(NSString *)showAllBook {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    
    for(Book *bookTemp in bookList) {
        //누적시키기
        [strTemp appendString:@"Name: "];
        [strTemp appendString:bookTemp.name];
        [strTemp appendString:@"\n"];
        [strTemp appendString:@"genre: "];
        [strTemp appendString:bookTemp.genre];
        [strTemp appendString:@"author: "];
        [strTemp appendString:bookTemp.author];
    }
    return strTemp;
}

-(NSUInteger)countBook {
    return [bookList count];
}

-(NSString *)findBook:(NSString *)name {
    NSMutableString *strTemp = [[NSMutableString alloc]init];
    for (Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) { //문자열비교
            [strTemp appendString:@"Name: "];
            [strTemp appendString:bookTemp.name];
            [strTemp appendString:@"\n"];
            [strTemp appendString:@"genre: "];
            [strTemp appendString:bookTemp.genre];
            [strTemp appendString:@"author: "];
            [strTemp appendString:bookTemp.author];
            
            return strTemp;
        }
    }
    return nil;
}
-(NSString *)removeBook:(NSString *)name {
    for(Book *bookTemp in bookList) {
        if([bookTemp.name isEqualToString:name]) {
            [bookList removeObject:bookTemp];
            return name;
        }
    }
    return nil;
}

@end

--------------------------------------
//
//  ViewController.h
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import <UIKit/UIKit.h>

@class BookManager;

@interface ViewController : UIViewController {
    BookManager *myBook;
}

@property (nonatomic, strong) IBOutlet UITextView *resultTextView;

//등록할 때 입력받은 값(textfield)을 갖고오기위해 -> synthesize작성해야함
@property (nonatomic, strong) IBOutlet UITextField *nameTextField;
@property (nonatomic, strong) IBOutlet UITextField *genreTextField;
@property (nonatomic, strong) IBOutlet UITextField *authorTextField;

//전체도서개수label
@property (nonatomic,strong) IBOutlet UILabel *countLabel;

//선언했으니 구현하러가자
-(IBAction)showAllBookAction:(id)sender;

//등록버튼
-(IBAction)addBookAction:(id)sender;

//검색버튼
-(IBAction)findBookAction:(id)sender;

//삭제버튼
-(IBAction)removeBookAction:(id)sender;

@end

------------------------------
//
//  ViewController.m
//  BookManager
//
//  Created by 조성동 on 2023/04/19.
//

#import "ViewController.h"
//import해줘야 된다
#import "BookManager.h"
#import "Book.h"
@interface ViewController ()

@end

@implementation ViewController
@synthesize resultTextView,nameTextField,genreTextField,authorTextField,countLabel;

- (void)viewDidLoad { //뷰가 로딩되자마자 자동으로 실행되는 부분
                      //그래서 초기화 코드는 여기 넣으면된다
    [super viewDidLoad];
    Book *book1 = [[Book alloc]init];
    book1.name = @"햄릿";
    book1.genre = @"비극";
    book1.author=@"세익스피어";
    
    [book1 bookPrint];
    
    Book *book2 = [[Book alloc]init];
    book2.name = @"누구를 위하여 종을 울리나";
    book2.genre = @"전쟁소설";
    book2.author=@"헤밍웨이";
    
    [book2 bookPrint];
    
    Book *book3 = [[Book alloc]init];
    book3.name = @"죄와 벌";
    book3.genre = @"사실주의";
    book3.author=@"톨스토이";
    
    [book3 bookPrint];
    
    //아래 부분은 지역변수이므로 전역변수로 사용하기 위해 주석처리 한 후 viewController.h에 @classname으로 선언함
    //BookManager *myBook = [[BookManager alloc]init];
    myBook = [[BookManager alloc]init];
    [myBook addBook:book1];
    [myBook addBook:book2];
    [myBook addBook:book3];
    
    //view가 로드될때 전체도서개수 찍으면 되니까 여기에서 적자
    //countBook은 int형이라서 li로 받은 다음에 그거를 stringWithFormat이 다시 String으로 바꿔서 text로 넣는다
    countLabel.text = [NSString stringWithFormat:@"%li",[myBook countBook]];
}

//전체 보기 버튼누르면 동작(전체보기버튼을 여기다가 끌어놓은 후에)
-(IBAction)showAllBookAction:(id)sender {
    resultTextView.text = [myBook showAllBook];
}

-(IBAction)addBookAction:(id)sender {
    Book *bookTemp = [[Book alloc]init];
    bookTemp.name = nameTextField.text;
    bookTemp.genre = genreTextField.text;
    bookTemp.author = authorTextField.text;
    
    [myBook addBook:bookTemp]; //등록한 책 추가
    resultTextView.text = @"책이 추가 됐습니다";
}

-(IBAction)findBookAction:(id)sender {
    NSString *strTemp = [myBook findBook:nameTextField.text];
    if(strTemp != nil) {
        resultTextView.text = strTemp;
    }else {
        resultTextView.text = @"찾으시는 책이 없네요";
    }
}

-(IBAction)removeBookAction:(id)sender {
    NSString *strTemp = [myBook removeBook:nameTextField.text];
    if(strTemp != nil) {
        //변형가능한 Mutable로(문자열을 계속 append해야되기때문에)
        NSMutableString *str = [[NSMutableString alloc]init];
        [str appendString:strTemp];
        [str appendString:@"책이 지워졌습니다"];
        resultTextView.text = str;
    }else {
        resultTextView.text = @"지울려는 책이 없습니다";
    }
}

@end
================================================================
<Foundation>은 앞에 NS가 붙고 무조건 써야 뭐 NSString, NSDictionary, 배열 등을 쓸 수 있다.
UIkit은 화면단에서 필요함. -> 최상위 NSObject도있고 UIView, UIButton, UILabel등

#)사진액자 프로젝트

//현재화면구성

    imageview


main스토리에 + ->imageview 올리고(드래그해서 전체크기로 확장) -> 속성(aspect fill로)

-----------------------------------------
//
//  ViewController.h
//  DigitalFrame
//
//  Created by 조성동 on 2023/06/08.
//

#import <UIKit/UIKit.h>

//viewController라는 클래스가 있고 변수로는 imgView가 있다.
@interface ViewController : UIViewController

//main스토리보드에서 화살표로 연결을하면 이제 아래 변수로 imageView를 컨트롤 할수있게된다.
@property (nonatomic,strong) IBOutlet UIImageView *imgView;

@end


-----------------------------------------
//
//  ViewController.m
//  DigitalFrame
//
//  Created by 조성동 on 2023/06/08.
//

#import "ViewController.h"

@interface ViewController ()

@end

@implementation ViewController
@synthesize imgView;

- (void)viewDidLoad {
    [super viewDidLoad];
    
    NSArray *cuteImages = [[NSArray alloc]initWithObjects:
                            [UIImage imageNamed:@"1.jpg"],
                           [UIImage imageNamed:@"2.jpg"],
                           [UIImage imageNamed:@"3.jpg"],
                           [UIImage imageNamed:@"4.jpg"],
                           [UIImage imageNamed:@"5.jpg"],
                           [UIImage imageNamed:@"6.jpg"],
                           [UIImage imageNamed:@"7.jpg"],
                           [UIImage imageNamed:@"8.jpg"],
                           [UIImage imageNamed:@"9.jpg"],
                           [UIImage imageNamed:@"10.jpg"],
                           [UIImage imageNamed:@"11.jpg"],
                           [UIImage imageNamed:@"12.jpg"],
                           [UIImage imageNamed:@"13.jpg"],
                           [UIImage imageNamed:@"14.jpg"],
                           [UIImage imageNamed:@"15.jpg"],
                           nil];
    //이미지 불러오고(UIImage의 역할이다 <--> UIImageView는 화면에 보여지는부분)
    
    //animationImages메서드는 UIImage값을 가지고 있는 배열만 받는다.
    imgView.animationImages = cuteImages;
    
    //시간설정
    imgView.animationDuration = 15.0; //15장이니까 1초에 하나씩
    [imgView startAnimating]; //애를 호출하면 바로 시작된다.
    
}
@end

======================================================
//현재화면구성
//start를 누르면 애니메이션이 시작되게 하자

    imageview
    
    start(button)


--------------------------------------
//
//  ViewController.h
//  DigitalFrame
//
//  Created by 조성동 on 2023/06/08.
//

#import <UIKit/UIKit.h>

@interface ViewController : UIViewController

//main스토리보드에서 화살표로 연결을하면 이제 아래 변수로 imageView를 컨트롤 할수있게된다.
@property (nonatomic,strong) IBOutlet UIImageView *imgView;

//start버튼에 끌어다 놓기
@property (nonatomic,strong) IBOutlet UIButton *toggleButton;

//toggle기능을 넣어서 start를 누르면 stop으로 바뀌고 그런식으로 할려고(start버튼에 끌어다놓기)
-(IBAction)toggleAction:(id)sender;



@end

------------------------------------------
//
//  ViewController.m
//  DigitalFrame
//
//  Created by 조성동 on 2023/06/08.
//

#import "ViewController.h"

@interface ViewController ()

@end

@implementation ViewController
@synthesize imgView,toggleButton;

- (void)viewDidLoad {
    [super viewDidLoad];
    
    NSArray *cuteImages = [[NSArray alloc]initWithObjects:
                            [UIImage imageNamed:@"1.jpg"],
                           [UIImage imageNamed:@"2.jpg"],
                           [UIImage imageNamed:@"3.jpg"],
                           [UIImage imageNamed:@"4.jpg"],
                           [UIImage imageNamed:@"5.jpg"],
                           [UIImage imageNamed:@"6.jpg"],
                           [UIImage imageNamed:@"7.jpg"],
                           [UIImage imageNamed:@"8.jpg"],
                           [UIImage imageNamed:@"9.jpg"],
                           [UIImage imageNamed:@"10.jpg"],
                           [UIImage imageNamed:@"11.jpg"],
                           [UIImage imageNamed:@"12.jpg"],
                           [UIImage imageNamed:@"13.jpg"],
                           [UIImage imageNamed:@"14.jpg"],
                           [UIImage imageNamed:@"15.jpg"],
                           nil];
    //이미지 불러오고(UIImage의 역할이다 <--> UIImageView는 화면에 보여지는부분)
    
    //animationImages메서드는 UIImage값을 가지고 있는 배열만 받는다.
    imgView.animationImages = cuteImages;
    
    //시간설정
    imgView.animationDuration = 15.0; //15장이니까 1초에 하나씩
    
}

//버튼을 누르면 시작
//Start누르면 Stop으로 변경
-(IBAction)toggleAction:(id)sender {
    if([imgView isAnimating]) { //애니메이팅이 되고있는지 확인 후 되고있으면 stop
        [imgView stopAnimating];
        [toggleButton setTitle:@"Start" forState:UIControlStateNormal];
    }else {
        [imgView startAnimating];
        [toggleButton setTitle:@"Stop" forState:UIControlStateNormal];
    }
}


@end

===========================================================
//현재화면구성

    imageview
    
    
slider  label(화면전환빠르기수치)
    
    start(button)

----------------------------------
//
//  ViewController.h
//  DigitalFrame
//
//  Created by 조성동 on 2023/06/08.
//

#import <UIKit/UIKit.h>

@interface ViewController : UIViewController

//main스토리보드에서 화살표로 연결을하면 이제 아래 변수로 imageView를 컨트롤 할수있게된다.
@property (nonatomic,strong) IBOutlet UIImageView *imgView;

@property (nonatomic,strong) IBOutlet UIButton *toggleButton;

@property (nonatomic,strong) IBOutlet UISlider *speedSlider;

//toggle기능을 넣어서 start를 누르면 stop으로 바뀌고 그런식으로 할려고
-(IBAction)toggleAction:(id)sender;

@end
------------------------------------
//
//  ViewController.m
//  DigitalFrame
//
//  Created by 조성동 on 2023/06/08.
//

#import "ViewController.h"

@interface ViewController ()

@end

@implementation ViewController
@synthesize imgView,toggleButton,speedSlider;

- (void)viewDidLoad {
    [super viewDidLoad];
    
    NSArray *cuteImages = [[NSArray alloc]initWithObjects:
                            [UIImage imageNamed:@"1.jpg"],
                           [UIImage imageNamed:@"2.jpg"],
                           [UIImage imageNamed:@"3.jpg"],
                           [UIImage imageNamed:@"4.jpg"],
                           [UIImage imageNamed:@"5.jpg"],
                           [UIImage imageNamed:@"6.jpg"],
                           [UIImage imageNamed:@"7.jpg"],
                           [UIImage imageNamed:@"8.jpg"],
                           [UIImage imageNamed:@"9.jpg"],
                           [UIImage imageNamed:@"10.jpg"],
                           [UIImage imageNamed:@"11.jpg"],
                           [UIImage imageNamed:@"12.jpg"],
                           [UIImage imageNamed:@"13.jpg"],
                           [UIImage imageNamed:@"14.jpg"],
                           [UIImage imageNamed:@"15.jpg"],
                           nil];
    //이미지 불러오고(UIImage의 역할이다 <--> UIImageView는 화면에 보여지는부분)
    
    //animationImages메서드는 UIImage값을 가지고 있는 배열만 받는다.
    imgView.animationImages = cuteImages;
    
    //시간설정
    imgView.animationDuration = 15.0; //15장이니까 1초에 하나씩
    
}

//버튼을 누르면 시작
-(IBAction)toggleAction:(id)sender {
    if([imgView isAnimating]) { //애니메이팅이 되고있는지 확인 후 되고있으면 stop
        [imgView stopAnimating];
        [toggleButton setTitle:@"Start" forState:UIControlStateNormal];
    }else {
        //start될때(누를때) slider를 불러와서 그 값에 맞게 변환속도반영
        //근데 이게 불편함. 그냥 사용자가 slider를 바꿀때마다 바로 응답하면좋을텐데
        imgView.animationDuration = speedSlider.value;
        [imgView startAnimating];
        [toggleButton setTitle:@"Stop" forState:UIControlStateNormal];
    }
}


@end
====================================================================
//실시간으로 slider 바뀔때마다 이미지 속도를 반영해뷰자
//현재화면구성

    imageview
    
    
slider  label(화면전환빠르기수치)
    
    start(button)

---------------------------------------
//
//  ViewController.h
//  DigitalFrame
//
//  Created by 조성동 on 2023/06/08.
//

#import <UIKit/UIKit.h>

@interface ViewController : UIViewController

//main스토리보드에서 화살표로 연결을하면 이제 아래 변수로 imageView를 컨트롤 할수있게된다.
@property (nonatomic,strong) IBOutlet UIImageView *imgView;

@property (nonatomic,strong) IBOutlet UIButton *toggleButton;

@property (nonatomic,strong) IBOutlet UISlider *speedSlider;

//슬라이드수치값 라벨
//끌어다놓기
@property (nonatomic,strong) UILabel *speedLabel;

//toggle기능을 넣어서 start를 누르면 stop으로 바뀌고 그런식으로 할려고
-(IBAction)toggleAction:(id)sender;
-(IBAction)changeSpeedAction:(id)sender;


@end


--------------------------------------------
//
//  ViewController.m
//  DigitalFrame
//
//  Created by 조성동 on 2023/06/08.
//

#import "ViewController.h"

@interface ViewController ()

@end

@implementation ViewController
@synthesize imgView,toggleButton,speedSlider, speedLabel;

- (void)viewDidLoad {
    [super viewDidLoad];
    
    NSArray *cuteImages = [[NSArray alloc]initWithObjects:
                            [UIImage imageNamed:@"1.jpg"],
                           [UIImage imageNamed:@"2.jpg"],
                           [UIImage imageNamed:@"3.jpg"],
                           [UIImage imageNamed:@"4.jpg"],
                           [UIImage imageNamed:@"5.jpg"],
                           [UIImage imageNamed:@"6.jpg"],
                           [UIImage imageNamed:@"7.jpg"],
                           [UIImage imageNamed:@"8.jpg"],
                           [UIImage imageNamed:@"9.jpg"],
                           [UIImage imageNamed:@"10.jpg"],
                           [UIImage imageNamed:@"11.jpg"],
                           [UIImage imageNamed:@"12.jpg"],
                           [UIImage imageNamed:@"13.jpg"],
                           [UIImage imageNamed:@"14.jpg"],
                           [UIImage imageNamed:@"15.jpg"],
                           nil];
    //이미지 불러오고(UIImage의 역할이다 <--> UIImageView는 화면에 보여지는부분)
    
    //animationImages메서드는 UIImage값을 가지고 있는 배열만 받는다.
    imgView.animationImages = cuteImages;
    
    //시간설정
    imgView.animationDuration = 15.0; //15장이니까 1초에 하나씩
    
}

//버튼을 누르면 시작
-(IBAction)toggleAction:(id)sender {
    if([imgView isAnimating]) { //애니메이팅이 되고있는지 확인 후 되고있으면 stop
        [imgView stopAnimating];
        [toggleButton setTitle:@"Start" forState:UIControlStateNormal];
    }else {
        [imgView startAnimating];
        [toggleButton setTitle:@"Stop" forState:UIControlStateNormal];
    }
}

//실시간 슬라이드(끌어다놓기) -> 끌어다놓을때touch up side말고 valuechanged로 선택
//valuechanged는 실시간
-(IBAction)changeSpeedAction:(id)sender {
    imgView.animationDuration = speedSlider.value;
    [imgView startAnimating];
    [toggleButton setTitle:@"Stop" forState:UIControlStateNormal];
    
    //문자열로리턴
    NSString *str = [[NSString alloc]initWithFormat:@"%f",speedSlider.value];
    speedLabel.text = str; //speedLabel.value가 float형식이라 형변환해줘야됨
}


@end
=====================================================
#)회원가입 화면 예제


























