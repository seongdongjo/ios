#)메모리
프로그램이 실행되면 운영체제(os)는 메모리(Ram)에 이 프로그램을 위한 공간을 할당해 준다.
그 공간은
        -----메모리------
        |   코드영역    |
        |   데이터영역   |
        |    힙영역     |
        |   스택영역    |
        ---------------

1-1 코드영역
우리가 작성한 소스코드가 기계어 형태로 저장된다.
중간에 코드가 변경되지 않도록 Read-only 형태로 저장된다.

1-2 데이터 영역
전역변수, static변수가 저장된다.
프로그램 시작과 동시에 할당되고, 프로그램 종료 되어야 메모리가 해제된다.
실행 도중 변수 값이 변경될 수 있으니 Read-Write로 지정된다.

struct Korean {
    static let country = "Korea" //스태틱 변수(상수)로 데이터 영역에 할당
}

var name: String? //전역 변수로 데이터 영역에 할당
var age: Int?     //전역 변수로 데이터 영역에 할당

func fetchData() {

}

1-3. 힙 영역(클래스인스턴스, 클로저)
프로그래머가 할당/해제 하는 메모리 영역
사용하고 난 후에는 반드시 메모리 해제를 해줘야한다. 그렇지 않으면 memory leak이 발생

//허허.. 메모리 해제를 해준적이 없는데..
스위프트는 ARC를 통해 힙에 할당된 메모리가 더이상 쓸모없어지면(참조되지 않으면) 자동으로 해제해주기때문이다.

1-4 스택 영역
함수 호출 시 함수의 지역변수, 매개변수, 리턴 값 등등이 저장되고, 함수가 종료되면 저장된 메모리도 해제된다.

func add(_ a: Int, _ b: Int) -> Int {  //파라미터 a,b는 스택에 할당
    let result = a + b                 //지역변수 result는 스택에 할당
    return result
}
그리고, 위 add함수가 종료되는 시점에 스택에 저장된 메모리는 모두 알아서 반환된다.


2-1. 언제 힙을 쓰고, 언제 스택을 쓰나??
스택은 메모리가 한정되어 있어서 너무 큰 메모리는 할당x
스택에 저장하기엔 큰 데이터의 경우엔 힙에 할당(직접할당하는 경우)
그래서 스택에 너무 많은 메모리를 할당해서 자신의 스택영역을 초과한 경우 스택오버플로우 발생

2-2 힙과 스택의 메모리 관계
힙과 스택은 같은 메모리 영역을 공유한다!!!
              ---------
0x00000000    |  힙    |       /\
    |         |       |        |
    |         |       |        |
    |         |  스택  |        |
   \/          ---------  0xffffffff

같은 메모리 공간이지만 힙 영역은 낮은 메모리 주소부터 할당받는것이고,
스택 영역은 높은 메모리 주소부터 할당 받는 것이다.

따라서, 힙 또한 자신의 영역 외로 확장하려다 보면, 힙 오버 플로우라는 것이 발생한다.

===========================================================
#)ARC가 메모리 영역 중 힙 영역을 관리한다.
//sodeul이라는 인스턴스를 생성하고 값을 초기화 했다.
class Human {
    var name: String?
    var age: Int?
    
    init(name: String?, age: Int?) {
        self.name = name
        self.age = age
    }
}
let sodeul = Human(name: "Sodeul", age: 26)

//그걸 저장될때는
스택영역에 sodeul(0x11111111) ---> 힙영역(Human Instance 0x11111111, name: "Sodeul", age: 26) 이렇게된다.

let clone = sodeul 이라고 해도 복사는 안된다.

스택에
Sodeul  --->     
                  human Instance
clone   --->


//그럼 스택에 있는 sodeul, clone이 함수 종료 시점에 사라지고 나면
//힙에 남은 쓰이지도 않는 인스턴스는 누가 메모리 해제 해줌??
-> ARC가 해제해준다. 즉, 힙에 할당된 인스턴스의 메모리를 알아서 관리해준다.


#) 힙 영역의 메모리를 관리하는 법은 GC와 RC가 있다.
자바는 GC(Garbage Collection), ARC는 RC에 포함된다.

둘의 차이점은 참조계산시점에 있다.
GC는 Runtime인데 어플실행동안 주기적으로 참조를 추적하여 사용하지 않는 인스턴스를 해제
RC는 Compile 시점에 언제 참조되고 해제되는지 결정되어 런타임때 그대로 실행(순환참조 일경우 메모리에서 해제안되는 현상)


#) MRC(MRR) VS ARC
둘다 RC지만 앞에 붙은 MRC(Manual) VS ARC(Automatic) 차이다.
즉, MRC는 힙에 메모리를 직접 할당/해제를 해주는 것이다.
2011년 이전엔 Object-c가 이방법을 사용. 2011이후에는 Object-c도 ARC사용

그래서, 오래된 오브젝트씨 언어보면 [test retain] [test release]를 볼수있는데 이것들이 MRC를 사용할 때 쓰는 메소드 들이다.

==========================================================
3. ARC의 메모리 관리방법
Reference Count 를 이용한다.
메모리의 참조횟수(RC)를 계산하여, 참조횟수가 0이되면 더이상 사용하지 않는 메모리라 생각하여 해제한다.

만약 참조횟수가 10이라면 해당 인스턴스가 10군데에서 참조되고 있단 뜻.
따라서 모든 인스턴스는 자신의 RC값을 가지고 있다.(인스턴스가 생성될 때 힙에 같이 저장된다고 한다)

3-1. 참조횟수 Count up(+)
참조횟수가 +1이 되는 순간은 인스턴스의 주소값을 변수에 할당할 때이다.

즉, 1. 인스턴스를 새로 생성할 때
let sodeul = Human(name: "Sodeul", age: 26)
또  2. 기존 인스턴스를 다른 변수에 대입할 때
let clone = sodeul

3-2. 참조횟수 Count down(-)
1. 인스턴스를 가리키던 변수가 메모리에서 해제되었을 때
func makeClone(_ origin: Human) {  
    let clone = origin                        // 2. Instance RC: 2
}

let sodeul = Human(name: "Sodeul", age: 26)   // 1. Instance RC: 1
makeClone(sodeul)                             // 3. Instance RC: 1(함수가 종료되어 지역변수 clone이 스택에서 해제되는 순간)

2. nil이 지정되었을 때
일단, nil이 지정된단 소리는 당연히 옵셔널 타입이라는 소리이다.

var sodeul: Human? = .init(name: "Sodeul", age: 26)
var clone = sodeul
clone = nil
sodeul = nil

3. 변수에 다른 값을 대입한 경우
var sodeul: Human? = .init(name: "Sodeul", age: 26)
var clone: Human? = .init(name: "Sodeul2", age 26)
sodeul = clone

sodeul의 RC는 -1, clone의 RC는 +1
즉, sodeul이 가리키던 인스턴스는 RC가 0이되었으므로 자동으로 메모리에서 해제


4. 프로퍼티의 경우, 속해있는 클래스 인스턴스가 메모리에서 해제될 때
class Contacts {
    var email: String?
    var address: String?
    
    init(email: String?, address: String?) {
        self.email = email
        self.address = address
    }
    deinit{print("Contacts Deinit)"}
}
class Human {
    var name: String?
    var age: Int?
    var contacts: Contacts? = .init(email: "o_o@naver", address: "Suwon")
    
    init(name: String?, age: Int?) {
        self.name = name
        self.age = age
    }
    deinit { print("Human Deinit")}
}
let sodeul: Human? = .init(name: "Sodeul", age: 26)
sodeul = nil

//위의 코드가 메모리에서는
스택                              힙영역
sodeul(0x11111111)  --RC+1->  Human Instance 0x11111111(RC=1)
                                name: "Sodeul"
                                age: 26
                               -contacts: 0x22222222
                        (RC+1) | 
                               |->Contacts Instance 0x22222222 RC=1
                                  email: "o_o@naver"  
                                  address: suwon
                                
즉, contacts는 sodeul이 가리키던 인스턴스에 소속된 프로퍼티이기 때문에,
sodeul이 가리키던 인스턴스가 메모리에서 해제될 경우, contacts의 RC가 하나 감소한다.
순서를 보면
1. sodeul에 nil을 할당한 순간, sodeul이 가리키고 있던 HumanInstance의 RC가 1 감소
2. Human Instance의 RC가 0이되었으니 메모리에서 해제
이떄, HumanInstance가 품고있던 contacts란 프로퍼티도 같이 메모리에서 해제되니, Contacts Instance의 RC가 1 감소 -> 해제

***주의할점
soduel이 가리키던 Human인스턴스가 메모리에서 해제된다 해서
프로퍼티인 contacts가 가리키던 Contacts 인스턴스의 메모리도 같이 해제 되는 것이 아니다!!!
Contacts 인스턴스의 RC가 1감소할뿐이다.

==========================================================
1. 강한참조(strong)
위에서 설명한게 강한참조다. 즉, 인스턴스의 주소값이 변수에 할당될 때, RC가 증가하면 강한참조 인것이다.
지금껏 자연스럽게 인스턴스를 생성하고 사용하던 것이 다 strong이자 강한 참조였던것이다.
default값이 strong 이다

강한참조의 문제점이 순환참조이다.

2. 순환참조
class Man {
    var name: String
    var girlfriend: Woman?
    
    init(name: String) {
        self.name = name
    }
    deinit{print("Man Deinit!")}
}

class Woman {
    var name: String
    var boyfriend: Man?
    
    init(name: String) {
        self.name = name
    }
    deinit{print("Woman Deinit!")}
}

var chelosu: Man? = .init(name: "철수")
var yeonghee: Woman? = .init(name: "영희")

//위에 처럼 생성되면 메모리에서는
스택                                         힙영역
cheolsu(0x111..)   ---RC+1(strong)-->   Man Instance(0x111..) RC=1 
                                          name: "철수
                                          girlfriend: nil     
yeonghee(0x222..)  ---RC+1(strong)-->   Woman Instance(0x222..) RC=1
                                          name:"영희"
                                          boyfriend: nil

//근데, 여기서 서로 사귄다면
chelosu?.girlfriend = yeonghee
yeonghee?.boyfriend = chelosu

힙영역
ManInstance(0x111..)RC=2
name:"철수"
girlfriend: 0x222... (아래 참조)

WomanInstance(0x222..) RC=2
name: "영희"
boyfriend: 0x111...(위에참조)

//이렇게 두개의 객체가 서로가 서로를 참조하고 있는 형태를 순환참조라고 한다.


2-1. 순환참조의 문제점
chelosu = nil
yeonghee = nil

이렇게 되면 스택에서 철수, 영희를 가리키던 변수에 nil을 할당했으니, Reference Count가 0이 되어
힙에서 각각 해제되어야 하는데... Man, Woman 클래스에서 deinit 메서드가 호출되지 않는걸 볼수가있다.

즉, 힙에서 사라지지않고 계속 메모리를 먹고있단 소리 -> 순환참조 때문에 RC=1이다.

스택                             힙
cheolsu(nil)  ---RC-1---->   Man Instance(0x111...) RC=1
                              name: "철수"
                              girlfriend: 0x222...
yeonghee(nil) ---RC-1---->   Woman Instance(0x222...) RC=1
                              name: "영희"
                              boyfriend: 0x111...


이렇게, strong으로 선언된 변수들이 순환참조 됐을 시 큰 문제점은
서로가 서로를 참조하고 있어서 RC가 0이 되지 못한다는 것이다.
심지어!!!!! 해당 인스턴스를 가리키던 변수(철수,영희)도 nil이 되어서 인스턴스에 접근 할 수 있는 방법도 없어서 메모리 해제도 못하는 현상

따라서, 어플이 죽기 전까진 memory leak이 계속 발생하는 것이다.
이렇게 strong을 사용해서 순환참조에 문제가 생긴 경우를 강한순환참조라고 한다.

3. weak, unowned
해결은 weak와 unowned를 사용하면 된다

3-1 weak(약한참조)
인스턴스를 참조할 시, RC를 증가시키지 않는다.
참조하던 인스턴스가 메모리에서 해제된 경우, 자동으로 nil이 할당되어 메모리가 해제된다.

그리고, 프로퍼티를 선언한 이후, 나중에 nil이 할당된다는 관점으로 보아
weak은 무조건 옵셔널 타입의 변수 여야한다.

둘중 한쪽을 weak으로 선언해주는것이다.
지금은 철수와 영희의 수명이 동일하기때문에 아무거나 weak으로 해도됨(아래처럼)
// weak 선언은 순환참조를 일으키는 프로퍼티 앞에 weak을 붙여주면 된다.
class Man {
    var name: String
    weak var girlfriend: Woman?
    
    init(name: String) {
        self.name = name
    }
    deinit{print("Man Deinit!")}
}

class Woman {
    var name: String
    var boyfriend: Man?
    
    init(name: String) {
        self.name = name
    }
    deinit{print("Woman Deinit!")}
}

var chelosu: Man? = .init(name:"철수")
var yeonghee: Woman? = .init(name:"영희")
chelosu?.girlfriend = yeonghee
yeonghee?.boyfriend = chelosu

//메모리 구조
스택                                     힙
chelosu(0x111...) --RC+1-->   |--> Man Instance (0x111..) RC=2
                              |    name: "철수"
                              |    --girlfriend: 0x222... (WomanInstance의 RC+1 하지않는다. weak이라서)
                    (strong)  |    |
                              |    |(weak)
                              |    |   
yeonghee(0x222...) --RC+1-->  |    |-->Woman Instance(0x222...) RC=1
                              |        name: "영희"
                              -------- boyfriend: 0x111...(ManInstance에 RC+1 Strong)


//이렇게 girlfriend의 프로퍼티가 weak이기 때문에 Woman Instance의 주소값을 할당받지만 Woman인스턴스의 RC값은 건들지 않는다.

#) 그럼 nil을 했을 떄 원리는 어떻게 될까??
chelosu = nil
yeonghee = nil

1. 철수, 영희 변수는 nil이 할당된 순간 각각의 인스턴스에 대한 RC를 1씩 감소한다.

스택                             힙
chelosu(nil) --RC-1-->      ManInstance(0x111...) RC=1
                             name: "철수"
                             girlfriend: 0x222...

yeonghee(nil) --RC-1-->      WomanInstance(0x222....) RC=0
                              name: "영희"
                              boyfriend: 0x111...
                              
2. RC가 0이 된 WomanInstance가 메모리에서 해제된다.
이때, WomanInstance에서 프로퍼티까지 없어지니까 ManInstance의 RC도 -1이 되서 0이된다.


==========================================================
#) ios10 이전에서는 앱이 켜진 상태에서 푸시 핸들링을 하려면, 직접 만든 커스텀 alert만 띄울 수 있었다.
   근데 10버전 이상부터는 앱이 켜졌을 때도 ios에서 제공하는 푸시형태로도 띄울 수 있다.

바로              
userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, 
withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) 함수를 이용하면 된다!!

앱이 실행중일때 노티피케이션이 왔을 때, user notification center에서 userNotificationCenter 메소드를 
콜해줘서 노티피케이션을 직접 앱으로 쏴준다.

#)Foreground로 push를 받았을 때, push click event에 대한 대처
사용자가 push를 누르지 않으면 IOS는 사용자가 push를 확인했는지 아닌지를 알수 없다.(ios 자체 수신여부 확인불가)
안드로이드는 push가 device에 도착을 했는가 여부를 체크 가능하다(android 자체 수신여부 확인가능)

그럼 어떻게 ? -> push를 눌렀을 때 이벤트발생시키기

#) 그 전에, 위에 쓰인 @escaping이 뭘까?
Escaping 클로저는 클로저가 함수의 인자로 전달됐을 때, 함수의 실행이 종료된 후 실행되는 클로저이다.
Non-Escaping 클로저는 반대로 함수의 실행이 종료되기 전에 실행되는 클로저이다.

#)먼저 Non-Escaping Closure 먼저 보자

func runClosure(closure: ()-> Void) {
    closure() //위에서 전달받은 closure함수 실행
}

1. 클로저가 runClosure() 함수의 closure 인자로 전달됨
2. 함수 안에서 closure()가 실행됨
3. runClosure() 함수가 값을 반환하고 종료됨
이렇게 runClosure라는 함수가 종료되기 전에 실행되기 때문에 closure는 Non-Escaping 클로저이다.


#) Escaping Closure
class ViewModel {
    var completionhandler: (() -> Void)? = nil
    
    func fetchData(completion: @escaping () -> Void) {
        completionhandler = completion
    }
}

1. 클로저가 fetchData() 함수의 completion 인자로 전달됨
2. 클로저는 또 변수에 저장가능하니까 클로저 completion이 completionhandler 변수에 저장됨
3. fetchData() 함수가 값을 반환하고 종료됨
4. 클로저 completion은 아직 실행되지 않음.
completion은 함수의 실행이 종료되기 전에 실행되지 않기 때문에 escaping 클로저, 다시말해 함수 밖에서
실행되는 클로저이다.

====================================================
클로저는 1급 객체이기 때문에 함수의 파라미터로 클로저를 전달 할 수 있다.

1-1. 파라미터가 클로저 하나인 함수
func doSomething(closure: () -> ()) {
    closure()
}

위의 함수를 호출하려면 이렇게 해야했다.
//doSomething호출할 때 closure라는 함수를 파라미터로 전달, closure함수내용은 print("Hello!")
doSomething(closure: {() -> () in 
    print("Hello!")
})

이렇게 클로저가 파라미터의 값 형식으로 함수 호출 구문() 안에 작성되어 있는 것을 Inline Closure라고 부름
근데 이 경우 마지막에 괄호도 ")}" 이렇게 되어 있어 헷갈리고 코드도 해석이 쉽지 않다.

그래서 이 클로저를 파라미터 값 형식으로 보내는 것이 아닌,
함수의 가장 마지막에 클로저를 꼬리처럼 덧붙여서 쓸 수 있는데,

doSomething () { () -> () in  //여기서 보면 closure라는 argumentLabel은 트레일링 클로저에선 생략가능
    print("Hello")
}

이게 바로 Trailing Closure이다.
즉, 파라미터가 클로저 하나일 경우!!!!! 이 클로저는 첫 파라미터자 마지막파라미터이므로 트레일링 클로저가 가능

//doSomething 함수호출
#)이게 더 진화하면 파라미터가 클로저 하나일 경우엔 호출구문인 () 도 생략가능
doSomething { () -> () in 
    print("Hello!")
}

================================================
1-2. 파라미터가 여러 개인 함수
아래처럼 첫 번째 파라미터로 success라는 클로저를 받고,
두번째 파라미터로 fail이라는 클로저를 받는 함수가 있다.

func fetchData(success: () -> (), fail: () -> ()) {
    
}

// inline Closure 방식에서 함수 호출 했을 때 이렇게 호출한다.
fetchData(success: { () -> () in
    print("Success!")
}, fail: { ()->() in
    print("Fail!")
})


//트레일링 클로저는 요렇게 호출가능
//파라미터가 여러개 일때는, 함수호출구문 () 를 생략해선 안된다.
fetchData(success: { () -> () in 
    print("Success!")
}) { () -> () in
    print("Fail!")
}

================================================================
2. 클로저의 경량 문법
func doSomething(closure: (Int, Int, Int) -> Int) {
    closure(1,2,3)
}

//원래라면 이렇게 호출했다
doSomething(closure: {( a: Int, b: Int, c:Int) -> Int in
    return a+b+c
})

// 2-1 이렇게 생략가능
doSomething(closure: {(a,b,c) in
    return a+b+c
})

// 2-2 Parameter Name은 Shortand Argument Names으로 대체하고,
       이 경우 Parameter Name과 in 키워드를 삭제한다.
그러면... Shortand Argument Names는 뭐지??

자자!! Parameter Name과 in 키워드를 삭제 한다고 했는데
doSomething(Closure: {(a,b,c) in
    return a+b+c
})
에서 Parameter Name은 (a,b,c) 이고 in 키워드는 말그대로 in 인데
이때, 이 a,b,c 라는 Parameter Name 대신에

a -> $0, b -> $1, c -> $2 이런식으로 $와 index를 이용해 Parameter에 순서대로 접근하는 것을 Shortand Argument Names이다.

따라서 이렇게 고칠수있다!!!!
doSomething(closure:  {
    return $0 + $1 + $2
})

// 2-3 단일 리턴문만 남을 경우, return도 생략한다.
여기서 단일 리턴문이란 것은, 
doSomething(closure: {
    return $0 + $1 + $2 //이렇게 클로저 내부에 코드가 return 구문 하나만 남은경우
})

따라서 이렇게 생략가능하다
doSomething(closure: {
    $0+$1+$2
})

// 2-4 클로저 파라미터가 마지막 파라미터라면, 트레일링 클로저로 작성
따라서 마지막 파라미터인 클로저를 다음과 같이
doSomething() {
    $0+$1+$2 //이렇게 트레일링 클로저로 작성 가능
}

또!!!! 파라미터가 하나인 경우 호출구문인 ()도 생략가능하다했으니까
doSomething {
    $0+$1+$2 
}

==============================================
3. @escaping
우리가 지금까지 짜왔던 클로저는 모두 non-escaping Closure이다.
함수 내부에서 직접 실행하기 위해서만 사용한다.
따라서, 파라미터로 받은 클로저를 변수나 상수에 대입할 수 없다.
중첩함수에서 클로저를 사용할 경우, 중첩함수를 리턴할 수 없다.
함수의 실행흐름을 탈출하지 않아, 함수가 종료되기 전에 무조건 실행되어야한다.

func doSomething(closure: () -> ()) {
    let f: () -> () = closure //에러가 난다. 함수의 흐름을 탈출하지 않는다는 말은 = 함수가 종료되고 나서 클로저가 실행될 수 없다.
}

//그래서, 10초 뒤 클로져를 실행하는 구문을 넣어도 함수가 끝나고 클로저가 실행되기 때문에 에러가 난다.
func doSomething(closure: () -> ()) {
    print("function start")
    
    DispatchQueue.main.asyncAfter(deadline: .now() + 10) {
        closure()
    }
    print("function end")
}


//또, 만약 중첩함수 내부에서 매개변수로 받은 클로저를 사용할 경우 에러가 난다.
func outer(closure: () -> ()) -> () -> () {
    func inner() {
        closure()
    }
    return inner
}

//위와 같이 안되는 경우를 @escaping 써서 해결!!
//이렇게 클로저 파라미터 타입 앞에 @escaping 붙여주면된다.
func doSomething(closure: @escaping () -> ()) {
    let f: () -> () = closure
}
=============================================
func doSomething(closure: @escaping () -> ()) {
    print("function start")

    DispatchQueue.main.asyncAfter(deadline: .now() + 10) {
        closure()
    }
    print("function end")
}

doSomething{ print("closure")}

//실행결과
function start
function end
closure
=============================================
근데 궁금한게 만약 함수가 종료된 후 클로저를 실행한다고 했을 때, 클로저가 해당 함수 내부 값을 사용할려면??
함수는 이미 종료되었는데??...
이게 이제 메모리 관련부분이다.

1. 클로저에서 값을 캡쳐한다는 것..
func doSomething() {
    var message = "Hi i am sodeul!"
    
    //클로저 범위 시작
    var num = 10
    let closure = {print(num)}

    //클로저 범위 끝
    print(message)
}

클로저 내부에서 외부변수인 num이라는 변수를 사용하기 때문에 num의 값을 클로저 내부적으로 저장하고있는데,
이것을 클로저에 의해 num의 값이 캡쳐되었다 라고 한다.
message란 변수는 클로저 내부에서 사용하지 않아서 클로저에 의해 값이 캡쳐되지 않는다.

1-1 클로저의 값 캡쳐 방식
Closure는 값을 캡쳐할 때 Value/Reference 타입에 관계없이 Reference Capture한다.

즉, 아까 num이란 변수를 클로저 내부적으로 저장한다고 했는데
num은 Int타입의 구조체형식이고, 이는 곧 Value 타입이기 때문에, 값을 복사해서 들고 저장해야 되는 것이 일반적이다.
그러나, 클로저는 Value/Reference 타입에 관계없이 캡쳐하는 값들을 참조한다.
이것을 Reference Capture 라고 한다.


#) 예시
func doSomething() {
    var num: Int = 0
    print("num check #1 = \(num)")
    
    let closure = {
        print("num check #3 = \(num)")
    }
    num = 20
    print("num check #2 = \(num)")
    closure()
}

#) 먼저 closure는 num이라는 외부변수를 클로저 내부에서 사용하기 때문에 num을 캡쳐한다.
따라서, closure를 실행하기 전에 num이란 값을 외부에서 변경하면 -> 클로저 내부에서 사용하는 num의 값도 변경
num check #1 = 0
num check #2 = 20
num check #3 = 20

#) 클로저 내부에서 num의 값을 바꾸면 클로저 외부에 있는 num의 값도 변경된다.
func doSomething() {
    var num: Int = 0
    print("num check #1 = \(num)")
    
    let closure = {
        num = 20
        print("num check #3 = \(num)")
    }
    closure()
    print("num check #2 = \(num)")
}

//출력
num check #1 = 0
num check #3 = 20
num check #2 = 20

즉, Reference Capture한다는 것이다.

#) 그럼 Value Type으로 Capture하고 싶으면? -> 클로저 캡쳐 리스트 이용
클로저의 시작인 { 의 바로 옆에 "[]"를 이용해 캡쳐할 멤버를 나열한다. 이때 in 키워드도 꼭 함꼐 작성한다.

func doSomething() {
    var num: Int = 0
    print("num check #1 = \(num)")
    
    let closure = {[num] in
        print("num check #3 = \(num)")
    }
    
    num = 20
    print("num check #2 = \(num)")
    closure()
}

이렇게 closure를 실행하기 전에 외부 변수 num의 값을 20으로 변경했지만 클로저의 num에는 영향을 주지 않는다.
num check #1 = 0
num check #2 = 20
num check #3 = 0


//주의 할 사항
위에서 처럼 Value Type으로 캡쳐한 경우
Closure를 선언할 당시의 num의 값을 상수로 캡쳐가 된다.
그래서, 아래처럼 하면 에러가 난다.

let closure = {[num, num2] in
    num = 2
}

//정리
클로저는 기본적으로 Value Type의 값도 Reference Capture 하지만,
클로저 캡쳐 리스트를 이용하면 Const Value Type(상수)으로 캡쳐가 가능하다.


//2-2 객체(Reference Type)의 값도 Capture 안되나?..
자, 위에서 Value Type의 값을 클로저 "캡쳐 리스트"를 통해서 Value Capture하는 것 까진 잘봤고
그럼, Reference Type의 값도 Capture Lists에 작성하면, Value Capture가 될까?

class Human {
    var name: String = "Sodeul"
}
var human1 : Human = .init()

let closure = {[human1] in
    print(human1.name)
}
human1.name = "Unknown"
closure()

//내가 클로저 캡쳐리스트를 통해 human1을 캡쳐했으니까 human1은 복사되어 캡쳐됐을까??
//결과는 Unknown이 나온다.
즉, 캡쳐리스트를 작성한다고 해도, Reference Type은 Value Capture가 되는게아니라 Reference Capture를 한다.
그럼, Reference Type은 클로저 캡쳐 리스트를 작성할 필요가 없겠네??

3. 클로저와 ARC를 알아보기에 앞써 메모리에 대해 알아보자

===========================================================






































